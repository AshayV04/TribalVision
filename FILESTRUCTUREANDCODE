================================================
FILE: README.md
================================================
<<<<<<< HEAD
# HTML

A modern HTML project utilizing Tailwind CSS for building responsive web applications with minimal setup.

## üöÄ Features

- **HTML5** - Modern HTML structure with best practices
- **Tailwind CSS** - Utility-first CSS framework for rapid UI development
- **Custom Components** - Pre-built component classes for buttons and containers
- **NPM Scripts** - Easy-to-use commands for development and building
- **Responsive Design** - Mobile-first approach for all screen sizes

## üìã Prerequisites

- Node.js (v12.x or higher)
- npm or yarn

## üõ†Ô∏è Installation

1. Install dependencies:
```bash
npm install
# or
yarn install
```

2. Start the development server:
```bash
npm run dev
# or
yarn dev
```

## üìÅ Project Structure

```
html_app/
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ tailwind.css   # Tailwind source file with custom utilities
‚îÇ   ‚îî‚îÄ‚îÄ main.css       # Compiled CSS (generated)
‚îú‚îÄ‚îÄ pages/             # HTML pages
‚îú‚îÄ‚îÄ index.html         # Main entry point
‚îú‚îÄ‚îÄ package.json       # Project dependencies and scripts
‚îî‚îÄ‚îÄ tailwind.config.js # Tailwind CSS configuration
```

## üé® Styling

This project uses Tailwind CSS for styling. Custom utility classes include:


## üß© Customization

To customize the Tailwind configuration, edit the `tailwind.config.js` file:


## üì¶ Build for Production

Build the CSS for production:

```bash
npm run build:css
# or
yarn build:css
```

## üì± Responsive Design

The app is built with responsive design using Tailwind CSS breakpoints:

- `sm`: 640px and up
- `md`: 768px and up
- `lg`: 1024px and up
- `xl`: 1280px and up
- `2xl`: 1536px and up

## üôè Acknowledgments

- Built with [Rocket.new](https://rocket.new)
- Powered by HTML and Tailwind CSS

Built with ‚ù§Ô∏è on Rocket.new
=======
# SIH
>>>>>>> be19d346639a8cdf43bc2cf2363c4d9e19f27997



================================================
FILE: index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TribalVision</title>
    <link rel="stylesheet" href="css/main.css" />
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .loading-container {
            text-align: center;
            color: white;
        }
        
        .logo {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .loading-text {
            font-size: 1.2rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }
        
        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(255,255,255,0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .redirect-info {
            margin-top: 20px;
            font-size: 0.9rem;
            opacity: 0.8;
        }
    </style>
<script type="module" src="https://static.rocket.new/rocket-web.js?_cfg=https%3A%2F%2Ffraatlas6365back.builtwithrocket.new&_be=https%3A%2F%2Fapplication.rocket.new&_v=0.1.8"></script>
</head>
<body>
    <div class="loading-container">
        <div class="logo">üó∫Ô∏è TribalVision</div>
        <div class="loading-text">Initializing Forest Rights Management System...</div>
        <div class="spinner"></div>
        <div class="redirect-info">Redirecting to login page...</div>
    </div>

    <script>
        // Show loading screen for 2 seconds then redirect to login page
        setTimeout(function() {
            window.location.href = 'pages/login.html';
        }, 2000);
        
        // Fallback redirect in case of any issues
        window.addEventListener('load', function() {
            setTimeout(function() {
                if (window.location.pathname.endsWith('index.html') || window.location.pathname.endsWith('/')) {
                    window.location.href = 'pages/login.html';
                }
            }, 2500);
        });
    </script>
<script id="dhws-dataInjector" src="/public/dhws-data-injector.js"></script>
</body>
</html>


================================================
FILE: package.json
================================================
{
  "name": "fra-atlas-webgis",
  "version": "1.0.0",
  "description": "",
  "main": "index.html",
  "dependencies": {
    "@dhiwise/component-tagger": "^1.0.10",
    "@tailwindcss/forms": "^0.5.7",
    "tailwindcss-animate": "^1.0.7",
    "tailwindcss-elevation": "^2.0.0",
    "tailwindcss-fluid-type": "^2.0.7"
  },
  "scripts": {
    "build:css": "npx @dhiwise/component-tagger && npx tailwindcss -i ./css/tailwind.css -o ./css/main.css",
    "watch:css": "npx @dhiwise/component-tagger && npx tailwindcss -i ./css/tailwind.css -o ./css/main.css --watch",
    "dev": "npm run watch:css",
    "start": "http-server -p 5174 -a 127.0.0.1 ."
  },
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "tailwindcss": "^3.4.17",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/container-queries": "^0.1.1",
    "@tailwindcss/line-clamp": "^0.1.0",
    "@tailwindcss/typography": "^0.5.16",
    "http-server": "^14.1.1"
  }
}


================================================
FILE: tailwind.config.js
================================================
module.exports = {
  content: [
    "./pages/*.{html,js}",
    "./index.html",
    "./src/**/*.{html,js,jsx,ts,tsx}",
    "./components/**/*.{html,js,jsx,ts,tsx}"
  ],
  theme: {
    extend: {
      colors: {
        // Primary Colors
        primary: {
          50: "#EFF6FF", // blue-50
          100: "#DBEAFE", // blue-100
          200: "#BFDBFE", // blue-200
          300: "#93C5FD", // blue-300
          400: "#60A5FA", // blue-400
          500: "#3B82F6", // blue-500
          600: "#2563EB", // blue-600
          700: "#1D4ED8", // blue-700
          800: "#1E40AF", // blue-800
          900: "#1E3A8A", // blue-900
          DEFAULT: "#1E40AF", // blue-800
        },
        // Secondary Colors
        secondary: {
          50: "#ECFDF5", // emerald-50
          100: "#D1FAE5", // emerald-100
          200: "#A7F3D0", // emerald-200
          300: "#6EE7B7", // emerald-300
          400: "#34D399", // emerald-400
          500: "#10B981", // emerald-500
          600: "#059669", // emerald-600
          700: "#047857", // emerald-700
          800: "#065F46", // emerald-800
          900: "#064E3B", // emerald-900
          DEFAULT: "#059669", // emerald-600
        },
        // Accent Colors
        accent: {
          50: "#FEF2F2", // red-50
          100: "#FEE2E2", // red-100
          200: "#FECACA", // red-200
          300: "#FCA5A5", // red-300
          400: "#F87171", // red-400
          500: "#EF4444", // red-500
          600: "#DC2626", // red-600
          700: "#B91C1C", // red-700
          800: "#991B1B", // red-800
          900: "#7F1D1D", // red-900
          DEFAULT: "#DC2626", // red-600
        },
        // Background Colors
        background: "#F8FAFC", // slate-50
        surface: "#FFFFFF", // white
        // Text Colors
        text: {
          primary: "#1F2937", // gray-800
          secondary: "#6B7280", // gray-500
        },
        // Status Colors
        success: "#10B981", // emerald-500
        warning: "#F59E0B", // amber-500
        error: "#EF4444", // red-500
        // Border Colors
        border: {
          light: "#E5E7EB", // gray-200
          medium: "#D1D5DB", // gray-300
          dark: "#9CA3AF", // gray-400
        },
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
        inter: ['Inter', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
        data: ['JetBrains Mono', 'monospace'],
      },
      fontSize: {
        'xs': ['0.75rem', { lineHeight: '1rem' }],
        'sm': ['0.875rem', { lineHeight: '1.25rem' }],
        'base': ['1rem', { lineHeight: '1.5rem' }],
        'lg': ['1.125rem', { lineHeight: '1.75rem' }],
        'xl': ['1.25rem', { lineHeight: '1.75rem' }],
        '2xl': ['1.5rem', { lineHeight: '2rem' }],
        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
        '5xl': ['3rem', { lineHeight: '1' }],
        '6xl': ['3.75rem', { lineHeight: '1' }],
      },
      fontWeight: {
        normal: '400',
        medium: '500',
        semibold: '600',
      },
      boxShadow: {
        'sm': '0 1px 3px rgba(0, 0, 0, 0.1)',
        'md': '0 4px 6px rgba(0, 0, 0, 0.1)',
        'lg': '0 10px 25px rgba(0, 0, 0, 0.15)',
        'xl': '0 20px 40px rgba(0, 0, 0, 0.2)',
        'floating': '0 4px 6px rgba(0, 0, 0, 0.1)',
        'elevated': '0 10px 25px rgba(0, 0, 0, 0.15)',
      },
      borderRadius: {
        'sm': '4px',
        'md': '6px',
        'lg': '8px',
        'xl': '12px',
      },
      transitionDuration: {
        '200': '200ms',
        '300': '300ms',
      },
      transitionTimingFunction: {
        'smooth': 'ease-in-out',
        'quick': 'ease-out',
        'spring': 'cubic-bezier(0.34, 1.56, 0.64, 1)',
      },
      animation: {
        'slide-in-right': 'slideInRight 300ms cubic-bezier(0.34, 1.56, 0.64, 1)',
        'slide-out-right': 'slideOutRight 300ms ease-in',
        'pulse-subtle': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
        'loading': 'loading 1.5s infinite',
      },
      keyframes: {
        slideInRight: {
          '0%': { transform: 'translateX(100%)', opacity: '0' },
          '100%': { transform: 'translateX(0)', opacity: '1' },
        },
        slideOutRight: {
          '0%': { transform: 'translateX(0)', opacity: '1' },
          '100%': { transform: 'translateX(100%)', opacity: '0' },
        },
        loading: {
          '0%': { backgroundPosition: '200% 0' },
          '100%': { backgroundPosition: '-200% 0' },
        },
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem',
      },
      zIndex: {
        '60': '60',
        '70': '70',
        '80': '80',
        '90': '90',
        '100': '100',
      },
    },
  },
  plugins: [],
}


================================================
FILE: test_ocr.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OCR Auto-Fill Test - TribalVision</title>
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body class="bg-background" style="height: 100vh;">
    <div class="max-w-4xl mx-auto px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg p-8">
            <h1 class="text-3xl font-bold text-center mb-8 text-primary-800">
                <i class="fas fa-file-upload mr-3"></i>
                OCR Auto-Fill Test
            </h1>
            
            <!-- Upload Section -->
            <div class="mb-8">
                <div class="border-2 border-dashed border-primary-300 rounded-lg p-8 text-center">
                    <i class="fas fa-cloud-upload-alt text-4xl text-primary-500 mb-4"></i>
                    <h3 class="text-lg font-semibold text-text-primary mb-2">Upload FRA Claim Document</h3>
                    <p class="text-text-secondary mb-4">Upload a PDF or image file to test OCR auto-fill functionality</p>
                    <input type="file" id="fileInput" accept=".pdf,.jpg,.jpeg,.png" class="hidden">
                    <button id="uploadBtn" class="btn-primary">
                        <i class="fas fa-folder-open mr-2"></i>Choose File
                    </button>
                </div>
            </div>

            <!-- Processing Status -->
            <div id="processingStatus" class="hidden mb-6">
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div class="flex items-center">
                        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mr-3"></div>
                        <span id="processingText" class="text-blue-800">Processing document...</span>
                    </div>
                </div>
            </div>

            <!-- Results Section -->
            <div id="resultsSection" class="hidden">
                <h3 class="text-xl font-semibold text-text-primary mb-4">Extracted Information</h3>
                
                <!-- Confidence Score -->
                <div class="mb-6">
                    <div class="flex justify-between items-center mb-2">
                        <span class="text-sm font-medium text-text-primary">OCR Confidence</span>
                        <span id="confidenceScore" class="text-sm font-medium text-primary-600">95%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                        <div id="confidenceBar" class="bg-primary-600 h-2 rounded-full" style="width: 95%"></div>
                    </div>
                </div>

                <!-- Auto-filled Form -->
                <form id="claimForm" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">Claimant Name</label>
                            <input type="text" id="claimantName" class="form-input w-full" placeholder="Auto-filled from OCR">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">Spouse Name</label>
                            <input type="text" id="spouseName" class="form-input w-full" placeholder="Auto-filled from OCR">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">Father/Mother Name</label>
                            <input type="text" id="fatherMotherName" class="form-input w-full" placeholder="Auto-filled from OCR">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">Village</label>
                            <input type="text" id="village" class="form-input w-full" placeholder="Auto-filled from OCR">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">District</label>
                            <input type="text" id="district" class="form-input w-full" placeholder="Auto-filled from OCR">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">Land Area</label>
                            <input type="text" id="landArea" class="form-input w-full" placeholder="Auto-filled from OCR">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">Scheduled Tribe</label>
                            <select id="scheduledTribe" class="form-input w-full">
                                <option value="">Select</option>
                                <option value="Yes">Yes</option>
                                <option value="No">No</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-text-primary mb-1">Other Traditional Forest Dweller</label>
                            <select id="otfd" class="form-input w-full">
                                <option value="">Select</option>
                                <option value="Yes">Yes</option>
                                <option value="No">No</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Address -->
                    <div>
                        <label class="block text-sm font-medium text-text-primary mb-1">Full Address</label>
                        <input type="text" id="fullAddress" class="form-input w-full" placeholder="Auto-filled from OCR">
                    </div>

                    <!-- Raw OCR Text -->
                    <div>
                        <label class="block text-sm font-medium text-text-primary mb-1">Raw OCR Text</label>
                        <textarea id="rawOcrText" class="form-input w-full h-32 text-xs" readonly placeholder="Raw text extracted from document"></textarea>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex gap-4 pt-4">
                        <button type="button" id="clearBtn" class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                            <i class="fas fa-eraser mr-2"></i>Clear Form
                        </button>
                        <button type="submit" id="saveBtn" class="btn-primary">
                            <i class="fas fa-save mr-2"></i>Save Claim
                        </button>
                    </div>
                </form>
            </div>

            <!-- Error Message -->
            <div id="errorMessage" class="hidden mt-4">
                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                    <div class="flex">
                        <i class="fas fa-exclamation-circle text-red-500 mr-3 mt-1"></i>
                        <div>
                            <h4 class="text-red-800 font-medium">Error</h4>
                            <p id="errorText" class="text-red-700 text-sm mt-1"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentOcrData = null;

        // Event listeners
        document.getElementById('uploadBtn').addEventListener('click', function() {
            document.getElementById('fileInput').click();
        });

        document.getElementById('fileInput').addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleFileUpload(e.target.files[0]);
            }
        });

        document.getElementById('clearBtn').addEventListener('click', function() {
            clearForm();
        });

        document.getElementById('claimForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveClaim();
        });

        // File upload handling
        function handleFileUpload(file) {
            // Validate file type and size
            const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
            const maxSize = 10 * 1024 * 1024; // 10MB

            if (!allowedTypes.includes(file.type)) {
                showError('Please upload a PDF, JPG, or PNG file.');
                return;
            }

            if (file.size > maxSize) {
                showError('File size must be less than 10MB.');
                return;
            }

            // Show processing status
            showProcessingStatus();
            
            // Process file
            processDocument(file);
        }

        function showProcessingStatus() {
            document.getElementById('processingStatus').classList.remove('hidden');
            document.getElementById('resultsSection').classList.add('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
        }

        function showError(message) {
            document.getElementById('processingStatus').classList.add('hidden');
            document.getElementById('resultsSection').classList.add('hidden');
            document.getElementById('errorMessage').classList.remove('hidden');
            document.getElementById('errorText').textContent = message;
        }

        async function processDocument(file) {
            try {
                const formData = new FormData();
                formData.append('file', file);

                // Update processing step
                document.getElementById('processingText').textContent = 'Uploading document...';

                const response = await fetch('http://localhost:5002/api/upload-document', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Failed to process document');
                }

                const data = await response.json();
                showResults(data);

            } catch (error) {
                console.error('OCR processing error:', error);
                showError('Failed to process document. Please try again.');
            }
        }

        function showResults(data) {
            document.getElementById('processingStatus').classList.add('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
            document.getElementById('resultsSection').classList.remove('hidden');

            // Update confidence score
            const confidence = Math.round(data.confidence || 0);
            document.getElementById('confidenceScore').textContent = confidence + '%';
            document.getElementById('confidenceBar').style.width = confidence + '%';

            // Auto-fill form fields
            const extracted = data.extracted_data || {};
            document.getElementById('claimantName').value = extracted.claimant_name || '';
            document.getElementById('spouseName').value = extracted.spouse_name || '';
            document.getElementById('fatherMotherName').value = extracted.father_or_mother_name || '';
            document.getElementById('village').value = extracted.village || '';
            document.getElementById('district').value = extracted.district || '';
            document.getElementById('landArea').value = extracted.land_area || '';
            document.getElementById('scheduledTribe').value = extracted.is_scheduled_tribe || '';
            document.getElementById('otfd').value = extracted.is_otfd || '';
            document.getElementById('fullAddress').value = data.full_address || '';
            document.getElementById('rawOcrText').value = data.raw_text || '';

            // Store data for saving
            currentOcrData = data;

            // Show success message
            setTimeout(() => {
                alert('‚úÖ OCR processing completed! Form has been auto-filled with extracted data.');
            }, 500);
        }

        function clearForm() {
            document.getElementById('claimForm').reset();
            document.getElementById('fileInput').value = '';
            document.getElementById('resultsSection').classList.add('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
            currentOcrData = null;
        }

        async function saveClaim() {
            if (!currentOcrData) {
                alert('No OCR data available to save.');
                return;
            }

            try {
                const formData = {
                    filename: currentOcrData.filename,
                    claimant_name: document.getElementById('claimantName').value,
                    spouse_name: document.getElementById('spouseName').value,
                    father_or_mother_name: document.getElementById('fatherMotherName').value,
                    village: document.getElementById('village').value,
                    district: document.getElementById('district').value,
                    land_area: document.getElementById('landArea').value,
                    is_scheduled_tribe: document.getElementById('scheduledTribe').value,
                    is_otfd: document.getElementById('otfd').value,
                    full_address: document.getElementById('fullAddress').value,
                    raw_text: currentOcrData.raw_text,
                    confidence: currentOcrData.confidence
                };

                const response = await fetch('http://localhost:5002/api/save-claim', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(`‚úÖ Claim saved successfully! Claim ID: ${result.claim_id}`);
                } else {
                    throw new Error('Failed to save claim');
                }

            } catch (error) {
                console.error('Save error:', error);
                alert('‚ùå Failed to save claim. Please try again.');
            }
        }
    </script>
</body>
</html>



================================================
FILE: css/main.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');

@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');

*, ::before, ::after{
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

::backdrop{
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

/*
! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: Inter, sans-serif;
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: JetBrains Mono, monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  letter-spacing: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

html {
  font-family: 'Inter', sans-serif;
}

body {
  background-color: var(--color-background);
  color: var(--color-text-primary);
  line-height: 1.6;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Inter', sans-serif;
  font-weight: 600;
  line-height: 1.2;
}

/* Floating Panel Styles */

.floating-panel {
  background: var(--color-surface);
  border-radius: 8px;
  box-shadow: var(--shadow-md);
  transition: all var(--transition-normal);
}

.floating-panel:hover {
  box-shadow: var(--shadow-lg);
}

/* Button Styles */

.btn-primary {
  background-color: var(--color-primary);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-weight: 500;
  transition: all var(--transition-fast);
  border: 2px solid transparent;
}

.btn-primary:hover {
  background-color: var(--color-primary-700);
  transform: translateY(-1px);
  box-shadow: var(--shadow-sm);
}

.btn-primary:focus {
  outline: none;
  border-color: var(--color-primary-300);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.btn-secondary {
  background-color: var(--color-secondary);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-weight: 500;
  transition: all var(--transition-fast);
  border: 2px solid transparent;
}

.btn-secondary:hover {
  background-color: var(--color-secondary-700);
  transform: translateY(-1px);
  box-shadow: var(--shadow-sm);
}

/* Status Indicators */

/* Map Marker Styles */

/* Loading Skeleton */

@keyframes loading {
  0% {
    background-position: 200% 0;
  }

  100% {
    background-position: -200% 0;
  }
}

/* Slide Animations */

@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }

  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideOutRight {
  from {
    transform: translateX(0);
    opacity: 1;
  }

  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

/* Form Elements */

.form-input {
  border: 1px solid var(--color-border-light);
  border-radius: 6px;
  padding: 0.5rem 0.75rem;
  transition: all var(--transition-fast);
  background-color: var(--color-surface);
}

.form-input:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
}

.form-input:invalid {
  border-color: var(--color-error);
}

/* Data Tables */

.data-table {
  font-family: 'JetBrains Mono', monospace;
  font-size: 0.875rem;
}

.data-table th {
  background-color: var(--color-background);
  font-weight: 500;
  padding: 0.75rem;
  border-bottom: 1px solid var(--color-border-light);
}

.data-table td {
  padding: 0.75rem;
  border-bottom: 1px solid var(--color-border-light);
}

/* Progress Indicators */

.progress-bar {
  height: 8px;
  background-color: var(--color-border-light);
  border-radius: 4px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background-color: var(--color-primary);
  transition: width var(--transition-normal);
}

.progress-fill.success {
  background-color: var(--color-success);
}

.progress-fill.warning {
  background-color: var(--color-warning);
}

.progress-fill.error {
  background-color: var(--color-error);
}

.pointer-events-none{
  pointer-events: none;
}

.static{
  position: static;
}

.fixed{
  position: fixed;
}

.absolute{
  position: absolute;
}

.relative{
  position: relative;
}

.sticky{
  position: sticky;
}

.inset-0{
  inset: 0px;
}

.inset-y-0{
  top: 0px;
  bottom: 0px;
}

.-right-1{
  right: -0.25rem;
}

.-top-1{
  top: -0.25rem;
}

.bottom-1\/3{
  bottom: 33.333333%;
}

.bottom-4{
  bottom: 1rem;
}

.left-1\/3{
  left: 33.333333%;
}

.left-1\/4{
  left: 25%;
}

.left-3{
  left: 0.75rem;
}

.left-4{
  left: 1rem;
}

.right-0{
  right: 0px;
}

.right-1\/3{
  right: 33.333333%;
}

.right-1\/4{
  right: 25%;
}

.right-4{
  right: 1rem;
}

.top-0{
  top: 0px;
}

.top-1\/2{
  top: 50%;
}

.top-1\/3{
  top: 33.333333%;
}

.top-1\/4{
  top: 25%;
}

.top-4{
  top: 1rem;
}

.top-6{
  top: 1.5rem;
}

.top-full{
  top: 100%;
}

.z-10{
  z-index: 10;
}

.z-20{
  z-index: 20;
}

.z-50{
  z-index: 50;
}

.mx-4{
  margin-left: 1rem;
  margin-right: 1rem;
}

.mx-auto{
  margin-left: auto;
  margin-right: auto;
}

.my-2{
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
}

.mb-1{
  margin-bottom: 0.25rem;
}

.mb-2{
  margin-bottom: 0.5rem;
}

.mb-3{
  margin-bottom: 0.75rem;
}

.mb-4{
  margin-bottom: 1rem;
}

.mb-6{
  margin-bottom: 1.5rem;
}

.mb-8{
  margin-bottom: 2rem;
}

.ml-1{
  margin-left: 0.25rem;
}

.ml-2{
  margin-left: 0.5rem;
}

.ml-auto{
  margin-left: auto;
}

.mr-1{
  margin-right: 0.25rem;
}

.mr-2{
  margin-right: 0.5rem;
}

.mr-3{
  margin-right: 0.75rem;
}

.mt-1{
  margin-top: 0.25rem;
}

.mt-2{
  margin-top: 0.5rem;
}

.mt-4{
  margin-top: 1rem;
}

.mt-6{
  margin-top: 1.5rem;
}

.mt-auto{
  margin-top: auto;
}

.block{
  display: block;
}

.flex{
  display: flex;
}

.table{
  display: table;
}

.grid{
  display: grid;
}

.hidden{
  display: none;
}

.h-12{
  height: 3rem;
}

.h-16{
  height: 4rem;
}

.h-2{
  height: 0.5rem;
}

.h-24{
  height: 6rem;
}

.h-3{
  height: 0.75rem;
}

.h-32{
  height: 8rem;
}

.h-4{
  height: 1rem;
}

.h-5{
  height: 1.25rem;
}

.h-6{
  height: 1.5rem;
}

.h-64{
  height: 16rem;
}

.h-8{
  height: 2rem;
}

.h-96{
  height: 24rem;
}

.h-full{
  height: 100%;
}

.h-screen{
  height: 100vh;
}

.max-h-\[90vh\]{
  max-height: 90vh;
}

.max-h-screen{
  max-height: 100vh;
}

.min-h-screen{
  min-height: 100vh;
}

.w-12{
  width: 3rem;
}

.w-16{
  width: 4rem;
}

.w-2{
  width: 0.5rem;
}

.w-20{
  width: 5rem;
}

.w-24{
  width: 6rem;
}

.w-3{
  width: 0.75rem;
}

.w-32{
  width: 8rem;
}

.w-4{
  width: 1rem;
}

.w-40{
  width: 10rem;
}

.w-48{
  width: 12rem;
}

.w-5{
  width: 1.25rem;
}

.w-6{
  width: 1.5rem;
}

.w-8{
  width: 2rem;
}

.w-80{
  width: 20rem;
}

.w-96{
  width: 24rem;
}

.w-full{
  width: 100%;
}

.min-w-32{
  min-width: 8rem;
}

.max-w-2xl{
  max-width: 42rem;
}

.max-w-7xl{
  max-width: 80rem;
}

.max-w-md{
  max-width: 28rem;
}

.flex-1{
  flex: 1 1 0%;
}

.-translate-y-1\/2{
  --tw-translate-y: -50%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.transform{
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

@keyframes spin{
  to{
    transform: rotate(360deg);
  }
}

.animate-spin{
  animation: spin 1s linear infinite;
}

.cursor-pointer{
  cursor: pointer;
}

.appearance-none{
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.grid-cols-1{
  grid-template-columns: repeat(1, minmax(0, 1fr));
}

.grid-cols-2{
  grid-template-columns: repeat(2, minmax(0, 1fr));
}

.flex-col{
  flex-direction: column;
}

.flex-wrap{
  flex-wrap: wrap;
}

.items-start{
  align-items: flex-start;
}

.items-center{
  align-items: center;
}

.justify-center{
  justify-content: center;
}

.justify-between{
  justify-content: space-between;
}

.gap-1{
  gap: 0.25rem;
}

.gap-2{
  gap: 0.5rem;
}

.gap-3{
  gap: 0.75rem;
}

.gap-4{
  gap: 1rem;
}

.gap-6{
  gap: 1.5rem;
}

.space-x-4 > :not([hidden]) ~ :not([hidden]){
  --tw-space-x-reverse: 0;
  margin-right: calc(1rem * var(--tw-space-x-reverse));
  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-x-8 > :not([hidden]) ~ :not([hidden]){
  --tw-space-x-reverse: 0;
  margin-right: calc(2rem * var(--tw-space-x-reverse));
  margin-left: calc(2rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-y-1 > :not([hidden]) ~ :not([hidden]){
  --tw-space-y-reverse: 0;
  margin-top: calc(0.25rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.25rem * var(--tw-space-y-reverse));
}

.space-y-2 > :not([hidden]) ~ :not([hidden]){
  --tw-space-y-reverse: 0;
  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));
}

.space-y-3 > :not([hidden]) ~ :not([hidden]){
  --tw-space-y-reverse: 0;
  margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));
}

.space-y-4 > :not([hidden]) ~ :not([hidden]){
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}

.space-y-6 > :not([hidden]) ~ :not([hidden]){
  --tw-space-y-reverse: 0;
  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));
}

.overflow-hidden{
  overflow: hidden;
}

.overflow-x-auto{
  overflow-x: auto;
}

.overflow-y-auto{
  overflow-y: auto;
}

.rounded{
  border-radius: 0.25rem;
}

.rounded-full{
  border-radius: 9999px;
}

.rounded-lg{
  border-radius: 8px;
}

.rounded-md{
  border-radius: 6px;
}

.rounded-xl{
  border-radius: 12px;
}

.rounded-br{
  border-bottom-right-radius: 0.25rem;
}

.border{
  border-width: 1px;
}

.border-2{
  border-width: 2px;
}

.border-b{
  border-bottom-width: 1px;
}

.border-b-2{
  border-bottom-width: 2px;
}

.border-l{
  border-left-width: 1px;
}

.border-r{
  border-right-width: 1px;
}

.border-t{
  border-top-width: 1px;
}

.border-dashed{
  border-style: dashed;
}

.border-blue-400{
  --tw-border-opacity: 1;
  border-color: rgb(96 165 250 / var(--tw-border-opacity, 1));
}

.border-border-light{
  --tw-border-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-border-opacity, 1));
}

.border-green-500{
  --tw-border-opacity: 1;
  border-color: rgb(34 197 94 / var(--tw-border-opacity, 1));
}

.border-orange-400{
  --tw-border-opacity: 1;
  border-color: rgb(251 146 60 / var(--tw-border-opacity, 1));
}

.border-primary-200{
  --tw-border-opacity: 1;
  border-color: rgb(191 219 254 / var(--tw-border-opacity, 1));
}

.border-primary-300{
  --tw-border-opacity: 1;
  border-color: rgb(147 197 253 / var(--tw-border-opacity, 1));
}

.border-primary-600{
  --tw-border-opacity: 1;
  border-color: rgb(37 99 235 / var(--tw-border-opacity, 1));
}

.border-secondary-200{
  --tw-border-opacity: 1;
  border-color: rgb(167 243 208 / var(--tw-border-opacity, 1));
}

.border-secondary-400{
  --tw-border-opacity: 1;
  border-color: rgb(52 211 153 / var(--tw-border-opacity, 1));
}

.bg-accent-100{
  --tw-bg-opacity: 1;
  background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));
}

.bg-accent-50{
  --tw-bg-opacity: 1;
  background-color: rgb(254 242 242 / var(--tw-bg-opacity, 1));
}

.bg-accent-500{
  --tw-bg-opacity: 1;
  background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));
}

.bg-accent-600{
  --tw-bg-opacity: 1;
  background-color: rgb(220 38 38 / var(--tw-bg-opacity, 1));
}

.bg-background{
  --tw-bg-opacity: 1;
  background-color: rgb(248 250 252 / var(--tw-bg-opacity, 1));
}

.bg-black{
  --tw-bg-opacity: 1;
  background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));
}

.bg-blue-400{
  --tw-bg-opacity: 1;
  background-color: rgb(96 165 250 / var(--tw-bg-opacity, 1));
}

.bg-blue-500{
  --tw-bg-opacity: 1;
  background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));
}

.bg-blue-600{
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));
}

.bg-gray-100{
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity, 1));
}

.bg-gray-200{
  --tw-bg-opacity: 1;
  background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1));
}

.bg-gray-400{
  --tw-bg-opacity: 1;
  background-color: rgb(156 163 175 / var(--tw-bg-opacity, 1));
}

.bg-gray-50{
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));
}

.bg-gray-900{
  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity, 1));
}

.bg-green-100{
  --tw-bg-opacity: 1;
  background-color: rgb(220 252 231 / var(--tw-bg-opacity, 1));
}

.bg-green-500{
  --tw-bg-opacity: 1;
  background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));
}

.bg-green-600{
  --tw-bg-opacity: 1;
  background-color: rgb(22 163 74 / var(--tw-bg-opacity, 1));
}

.bg-orange-400{
  --tw-bg-opacity: 1;
  background-color: rgb(251 146 60 / var(--tw-bg-opacity, 1));
}

.bg-orange-500{
  --tw-bg-opacity: 1;
  background-color: rgb(249 115 22 / var(--tw-bg-opacity, 1));
}

.bg-orange-600{
  --tw-bg-opacity: 1;
  background-color: rgb(234 88 12 / var(--tw-bg-opacity, 1));
}

.bg-primary-100{
  --tw-bg-opacity: 1;
  background-color: rgb(219 234 254 / var(--tw-bg-opacity, 1));
}

.bg-primary-50{
  --tw-bg-opacity: 1;
  background-color: rgb(239 246 255 / var(--tw-bg-opacity, 1));
}

.bg-primary-500{
  --tw-bg-opacity: 1;
  background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));
}

.bg-primary-600{
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));
}

.bg-primary-800{
  --tw-bg-opacity: 1;
  background-color: rgb(30 64 175 / var(--tw-bg-opacity, 1));
}

.bg-red-100{
  --tw-bg-opacity: 1;
  background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));
}

.bg-secondary-100{
  --tw-bg-opacity: 1;
  background-color: rgb(209 250 229 / var(--tw-bg-opacity, 1));
}

.bg-secondary-400{
  --tw-bg-opacity: 1;
  background-color: rgb(52 211 153 / var(--tw-bg-opacity, 1));
}

.bg-secondary-50{
  --tw-bg-opacity: 1;
  background-color: rgb(236 253 245 / var(--tw-bg-opacity, 1));
}

.bg-secondary-500{
  --tw-bg-opacity: 1;
  background-color: rgb(16 185 129 / var(--tw-bg-opacity, 1));
}

.bg-secondary-600{
  --tw-bg-opacity: 1;
  background-color: rgb(5 150 105 / var(--tw-bg-opacity, 1));
}

.bg-surface{
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));
}

.bg-transparent{
  background-color: transparent;
}

.bg-warning{
  --tw-bg-opacity: 1;
  background-color: rgb(245 158 11 / var(--tw-bg-opacity, 1));
}

.bg-warning\/10{
  background-color: rgb(245 158 11 / 0.1);
}

.bg-white{
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));
}

.bg-yellow-100{
  --tw-bg-opacity: 1;
  background-color: rgb(254 249 195 / var(--tw-bg-opacity, 1));
}

.bg-yellow-500{
  --tw-bg-opacity: 1;
  background-color: rgb(234 179 8 / var(--tw-bg-opacity, 1));
}

.bg-opacity-10{
  --tw-bg-opacity: 0.1;
}

.bg-opacity-20{
  --tw-bg-opacity: 0.2;
}

.bg-opacity-50{
  --tw-bg-opacity: 0.5;
}

.bg-opacity-75{
  --tw-bg-opacity: 0.75;
}

.object-cover{
  -o-object-fit: cover;
     object-fit: cover;
}

.p-2{
  padding: 0.5rem;
}

.p-3{
  padding: 0.75rem;
}

.p-4{
  padding: 1rem;
}

.p-6{
  padding: 1.5rem;
}

.p-8{
  padding: 2rem;
}

.px-2{
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

.px-3{
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}

.px-4{
  padding-left: 1rem;
  padding-right: 1rem;
}

.px-6{
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

.py-1{
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

.py-12{
  padding-top: 3rem;
  padding-bottom: 3rem;
}

.py-2{
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.py-3{
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}

.py-4{
  padding-top: 1rem;
  padding-bottom: 1rem;
}

.py-6{
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
}

.py-8{
  padding-top: 2rem;
  padding-bottom: 2rem;
}

.pb-1{
  padding-bottom: 0.25rem;
}

.pb-4{
  padding-bottom: 1rem;
}

.pl-10{
  padding-left: 2.5rem;
}

.pr-10{
  padding-right: 2.5rem;
}

.pr-3{
  padding-right: 0.75rem;
}

.pt-2{
  padding-top: 0.5rem;
}

.pt-20{
  padding-top: 5rem;
}

.pt-4{
  padding-top: 1rem;
}

.text-left{
  text-align: left;
}

.text-center{
  text-align: center;
}

.text-right{
  text-align: right;
}

.text-2xl{
  font-size: 1.5rem;
  line-height: 2rem;
}

.text-3xl{
  font-size: 1.875rem;
  line-height: 2.25rem;
}

.text-4xl{
  font-size: 2.25rem;
  line-height: 2.5rem;
}

.text-base{
  font-size: 1rem;
  line-height: 1.5rem;
}

.text-lg{
  font-size: 1.125rem;
  line-height: 1.75rem;
}

.text-sm{
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.text-xl{
  font-size: 1.25rem;
  line-height: 1.75rem;
}

.text-xs{
  font-size: 0.75rem;
  line-height: 1rem;
}

.font-bold{
  font-weight: 700;
}

.font-medium{
  font-weight: 500;
}

.font-semibold{
  font-weight: 600;
}

.uppercase{
  text-transform: uppercase;
}

.capitalize{
  text-transform: capitalize;
}

.tracking-wide{
  letter-spacing: 0.025em;
}

.text-accent-600{
  --tw-text-opacity: 1;
  color: rgb(220 38 38 / var(--tw-text-opacity, 1));
}

.text-gray-400{
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity, 1));
}

.text-gray-500{
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity, 1));
}

.text-gray-700{
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity, 1));
}

.text-gray-800{
  --tw-text-opacity: 1;
  color: rgb(31 41 55 / var(--tw-text-opacity, 1));
}

.text-green-600{
  --tw-text-opacity: 1;
  color: rgb(22 163 74 / var(--tw-text-opacity, 1));
}

.text-green-800{
  --tw-text-opacity: 1;
  color: rgb(22 101 52 / var(--tw-text-opacity, 1));
}

.text-primary-600{
  --tw-text-opacity: 1;
  color: rgb(37 99 235 / var(--tw-text-opacity, 1));
}

.text-primary-700{
  --tw-text-opacity: 1;
  color: rgb(29 78 216 / var(--tw-text-opacity, 1));
}

.text-primary-800{
  --tw-text-opacity: 1;
  color: rgb(30 64 175 / var(--tw-text-opacity, 1));
}

.text-red-800{
  --tw-text-opacity: 1;
  color: rgb(153 27 27 / var(--tw-text-opacity, 1));
}

.text-secondary-600{
  --tw-text-opacity: 1;
  color: rgb(5 150 105 / var(--tw-text-opacity, 1));
}

.text-secondary-700{
  --tw-text-opacity: 1;
  color: rgb(4 120 87 / var(--tw-text-opacity, 1));
}

.text-secondary-800{
  --tw-text-opacity: 1;
  color: rgb(6 95 70 / var(--tw-text-opacity, 1));
}

.text-text-primary{
  --tw-text-opacity: 1;
  color: rgb(31 41 55 / var(--tw-text-opacity, 1));
}

.text-text-secondary{
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity, 1));
}

.text-warning{
  --tw-text-opacity: 1;
  color: rgb(245 158 11 / var(--tw-text-opacity, 1));
}

.text-white{
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity, 1));
}

.text-yellow-600{
  --tw-text-opacity: 1;
  color: rgb(202 138 4 / var(--tw-text-opacity, 1));
}

.text-yellow-800{
  --tw-text-opacity: 1;
  color: rgb(133 77 14 / var(--tw-text-opacity, 1));
}

.opacity-5{
  opacity: 0.05;
}

.shadow-lg{
  --tw-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  --tw-shadow-colored: 0 10px 25px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-md{
  --tw-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  --tw-shadow-colored: 0 4px 6px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-sm{
  --tw-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  --tw-shadow-colored: 0 1px 3px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.filter{
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.transition-all{
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.transition-colors{
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.duration-300{
  transition-duration: 300ms;
}

:root {
  /* Primary Colors */
  --color-primary: #1E40AF;
  /* blue-800 */
  --color-primary-50: #EFF6FF;
  /* blue-50 */
  --color-primary-100: #DBEAFE;
  /* blue-100 */
  --color-primary-200: #BFDBFE;
  /* blue-200 */
  --color-primary-300: #93C5FD;
  /* blue-300 */
  --color-primary-400: #60A5FA;
  /* blue-400 */
  --color-primary-500: #3B82F6;
  /* blue-500 */
  --color-primary-600: #2563EB;
  /* blue-600 */
  --color-primary-700: #1D4ED8;
  /* blue-700 */
  --color-primary-800: #1E40AF;
  /* blue-800 */
  --color-primary-900: #1E3A8A;
  /* blue-900 */
  /* Secondary Colors */
  --color-secondary: #059669;
  /* emerald-600 */
  --color-secondary-50: #ECFDF5;
  /* emerald-50 */
  --color-secondary-100: #D1FAE5;
  /* emerald-100 */
  --color-secondary-200: #A7F3D0;
  /* emerald-200 */
  --color-secondary-300: #6EE7B7;
  /* emerald-300 */
  --color-secondary-400: #34D399;
  /* emerald-400 */
  --color-secondary-500: #10B981;
  /* emerald-500 */
  --color-secondary-600: #059669;
  /* emerald-600 */
  --color-secondary-700: #047857;
  /* emerald-700 */
  --color-secondary-800: #065F46;
  /* emerald-800 */
  --color-secondary-900: #064E3B;
  /* emerald-900 */
  /* Accent Colors */
  --color-accent: #DC2626;
  /* red-600 */
  --color-accent-50: #FEF2F2;
  /* red-50 */
  --color-accent-100: #FEE2E2;
  /* red-100 */
  --color-accent-200: #FECACA;
  /* red-200 */
  --color-accent-300: #FCA5A5;
  /* red-300 */
  --color-accent-400: #F87171;
  /* red-400 */
  --color-accent-500: #EF4444;
  /* red-500 */
  --color-accent-600: #DC2626;
  /* red-600 */
  --color-accent-700: #B91C1C;
  /* red-700 */
  --color-accent-800: #991B1B;
  /* red-800 */
  --color-accent-900: #7F1D1D;
  /* red-900 */
  /* Background Colors */
  --color-background: #F8FAFC;
  /* slate-50 */
  --color-surface: #FFFFFF;
  /* white */
  /* Text Colors */
  --color-text-primary: #1F2937;
  /* gray-800 */
  --color-text-secondary: #6B7280;
  /* gray-500 */
  /* Status Colors */
  --color-success: #10B981;
  /* emerald-500 */
  --color-warning: #F59E0B;
  /* amber-500 */
  --color-error: #EF4444;
  /* red-500 */
  /* Border Colors */
  --color-border-light: #E5E7EB;
  /* gray-200 */
  --color-border-medium: #D1D5DB;
  /* gray-300 */
  --color-border-dark: #9CA3AF;
  /* gray-400 */
  /* Shadow Variables */
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.15);
  --shadow-xl: 0 20px 40px rgba(0, 0, 0, 0.2);
  /* Animation Variables */
  --transition-fast: 200ms ease-out;
  --transition-normal: 300ms ease-in-out;
  --transition-spring: cubic-bezier(0.34, 1.56, 0.64, 1);
}

/* Base Styles */

/* Component Styles */

/* Utility Classes */

.hover\:border-primary-300:hover{
  --tw-border-opacity: 1;
  border-color: rgb(147 197 253 / var(--tw-border-opacity, 1));
}

.hover\:bg-gray-100:hover{
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity, 1));
}

.hover\:bg-gray-50:hover{
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));
}

.hover\:bg-primary-700:hover{
  --tw-bg-opacity: 1;
  background-color: rgb(29 78 216 / var(--tw-bg-opacity, 1));
}

.hover\:text-accent-700:hover{
  --tw-text-opacity: 1;
  color: rgb(185 28 28 / var(--tw-text-opacity, 1));
}

.hover\:text-primary-600:hover{
  --tw-text-opacity: 1;
  color: rgb(37 99 235 / var(--tw-text-opacity, 1));
}

.hover\:text-primary-700:hover{
  --tw-text-opacity: 1;
  color: rgb(29 78 216 / var(--tw-text-opacity, 1));
}

.hover\:text-secondary-700:hover{
  --tw-text-opacity: 1;
  color: rgb(4 120 87 / var(--tw-text-opacity, 1));
}

.hover\:text-text-primary:hover{
  --tw-text-opacity: 1;
  color: rgb(31 41 55 / var(--tw-text-opacity, 1));
}

.focus\:ring-primary-500:focus{
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));
}

.disabled\:opacity-50:disabled{
  opacity: 0.5;
}

@media (min-width: 640px){
  .sm\:flex-row{
    flex-direction: row;
  }

  .sm\:px-6{
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }
}

@media (min-width: 768px){
  .md\:flex{
    display: flex;
  }

  .md\:hidden{
    display: none;
  }

  .md\:grid-cols-2{
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  .md\:grid-cols-3{
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  .md\:grid-cols-4{
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}

@media (min-width: 1024px){
  .lg\:col-span-1{
    grid-column: span 1 / span 1;
  }

  .lg\:col-span-2{
    grid-column: span 2 / span 2;
  }

  .lg\:h-\[500px\]{
    height: 500px;
  }

  .lg\:grid-cols-2{
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  .lg\:grid-cols-3{
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  .lg\:grid-cols-4{
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }

  .lg\:flex-row{
    flex-direction: row;
  }

  .lg\:items-center{
    align-items: center;
  }

  .lg\:px-8{
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

@media (min-width: 1280px){
  .xl\:col-span-2{
    grid-column: span 2 / span 2;
  }

  .xl\:grid-cols-3{
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}


================================================
FILE: css/tailwind.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Primary Colors */
  --color-primary: #1E40AF; /* blue-800 */
  --color-primary-50: #EFF6FF; /* blue-50 */
  --color-primary-100: #DBEAFE; /* blue-100 */
  --color-primary-200: #BFDBFE; /* blue-200 */
  --color-primary-300: #93C5FD; /* blue-300 */
  --color-primary-400: #60A5FA; /* blue-400 */
  --color-primary-500: #3B82F6; /* blue-500 */
  --color-primary-600: #2563EB; /* blue-600 */
  --color-primary-700: #1D4ED8; /* blue-700 */
  --color-primary-800: #1E40AF; /* blue-800 */
  --color-primary-900: #1E3A8A; /* blue-900 */

  /* Secondary Colors */
  --color-secondary: #059669; /* emerald-600 */
  --color-secondary-50: #ECFDF5; /* emerald-50 */
  --color-secondary-100: #D1FAE5; /* emerald-100 */
  --color-secondary-200: #A7F3D0; /* emerald-200 */
  --color-secondary-300: #6EE7B7; /* emerald-300 */
  --color-secondary-400: #34D399; /* emerald-400 */
  --color-secondary-500: #10B981; /* emerald-500 */
  --color-secondary-600: #059669; /* emerald-600 */
  --color-secondary-700: #047857; /* emerald-700 */
  --color-secondary-800: #065F46; /* emerald-800 */
  --color-secondary-900: #064E3B; /* emerald-900 */

  /* Accent Colors */
  --color-accent: #DC2626; /* red-600 */
  --color-accent-50: #FEF2F2; /* red-50 */
  --color-accent-100: #FEE2E2; /* red-100 */
  --color-accent-200: #FECACA; /* red-200 */
  --color-accent-300: #FCA5A5; /* red-300 */
  --color-accent-400: #F87171; /* red-400 */
  --color-accent-500: #EF4444; /* red-500 */
  --color-accent-600: #DC2626; /* red-600 */
  --color-accent-700: #B91C1C; /* red-700 */
  --color-accent-800: #991B1B; /* red-800 */
  --color-accent-900: #7F1D1D; /* red-900 */

  /* Background Colors */
  --color-background: #F8FAFC; /* slate-50 */
  --color-surface: #FFFFFF; /* white */

  /* Text Colors */
  --color-text-primary: #1F2937; /* gray-800 */
  --color-text-secondary: #6B7280; /* gray-500 */

  /* Status Colors */
  --color-success: #10B981; /* emerald-500 */
  --color-warning: #F59E0B; /* amber-500 */
  --color-error: #EF4444; /* red-500 */

  /* Border Colors */
  --color-border-light: #E5E7EB; /* gray-200 */
  --color-border-medium: #D1D5DB; /* gray-300 */
  --color-border-dark: #9CA3AF; /* gray-400 */

  /* Shadow Variables */
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.15);
  --shadow-xl: 0 20px 40px rgba(0, 0, 0, 0.2);

  /* Animation Variables */
  --transition-fast: 200ms ease-out;
  --transition-normal: 300ms ease-in-out;
  --transition-spring: cubic-bezier(0.34, 1.56, 0.64, 1);
}

/* Base Styles */
@layer base {
  html {
    font-family: 'Inter', sans-serif;
  }
  
  body {
    background-color: var(--color-background);
    color: var(--color-text-primary);
    line-height: 1.6;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Inter', sans-serif;
    font-weight: 600;
    line-height: 1.2;
  }

  .font-data {
    font-family: 'JetBrains Mono', monospace;
  }
}

/* Component Styles */
@layer components {
  /* Floating Panel Styles */
  .floating-panel {
    background: var(--color-surface);
    border-radius: 8px;
    box-shadow: var(--shadow-md);
    transition: all var(--transition-normal);
  }

  .floating-panel:hover {
    box-shadow: var(--shadow-lg);
  }

  /* Button Styles */
  .btn-primary {
    background-color: var(--color-primary);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 500;
    transition: all var(--transition-fast);
    border: 2px solid transparent;
  }

  .btn-primary:hover {
    background-color: var(--color-primary-700);
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
  }

  .btn-primary:focus {
    outline: none;
    border-color: var(--color-primary-300);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .btn-secondary {
    background-color: var(--color-secondary);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 500;
    transition: all var(--transition-fast);
    border: 2px solid transparent;
  }

  .btn-secondary:hover {
    background-color: var(--color-secondary-700);
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
  }

  /* Status Indicators */
  .status-success {
    background-color: var(--color-success);
    color: white;
  }

  .status-warning {
    background-color: var(--color-warning);
    color: white;
  }

  .status-error {
    background-color: var(--color-error);
    color: white;
  }

  /* Map Marker Styles */
  .map-marker {
    transition: all var(--transition-fast);
    cursor: pointer;
  }

  .map-marker:hover {
    transform: scale(1.1);
    filter: brightness(1.1);
  }

  /* Loading Skeleton */
  .skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Slide Animations */
  .slide-in-right {
    animation: slideInRight var(--transition-normal) var(--transition-spring);
  }

  .slide-out-right {
    animation: slideOutRight var(--transition-normal) ease-in;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOutRight {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  /* Form Elements */
  .form-input {
    border: 1px solid var(--color-border-light);
    border-radius: 6px;
    padding: 0.5rem 0.75rem;
    transition: all var(--transition-fast);
    background-color: var(--color-surface);
  }

  .form-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
  }

  .form-input:invalid {
    border-color: var(--color-error);
  }

  /* Data Tables */
  .data-table {
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.875rem;
  }

  .data-table th {
    background-color: var(--color-background);
    font-weight: 500;
    padding: 0.75rem;
    border-bottom: 1px solid var(--color-border-light);
  }

  .data-table td {
    padding: 0.75rem;
    border-bottom: 1px solid var(--color-border-light);
  }

  /* Progress Indicators */
  .progress-bar {
    height: 8px;
    background-color: var(--color-border-light);
    border-radius: 4px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background-color: var(--color-primary);
    transition: width var(--transition-normal);
  }

  .progress-fill.success {
    background-color: var(--color-success);
  }

  .progress-fill.warning {
    background-color: var(--color-warning);
  }

  .progress-fill.error {
    background-color: var(--color-error);
  }
}

/* Utility Classes */
@layer utilities {
  .text-data {
    font-family: 'JetBrains Mono', monospace;
  }

  .shadow-floating {
    box-shadow: var(--shadow-md);
  }

  .shadow-elevated {
    box-shadow: var(--shadow-lg);
  }

  .transition-smooth {
    transition: all var(--transition-normal);
  }

  .transition-quick {
    transition: all var(--transition-fast);
  }

  .border-focus {
    border: 2px solid var(--color-primary);
  }
}


================================================
FILE: OCR/README.md
================================================
# FRA OCR Integration

This directory contains the OCR (Optical Character Recognition) integration for the TribalVision system. It provides automated document processing capabilities for FRA claim forms using Tesseract OCR and Google's Gemini AI.

## Features

- **Document Upload**: Support for PDF, JPG, and PNG files
- **OCR Processing**: Text extraction using Tesseract OCR
- **AI-Powered Data Extraction**: Structured data extraction using Google Gemini
- **Confidence Scoring**: OCR confidence assessment
- **Human Verification**: Manual review and correction interface
- **Database Integration**: Automatic saving to SQLite database
- **REST API**: Flask-based API for frontend integration

## Prerequisites

### System Requirements
- Python 3.8 or higher
- Tesseract OCR installed on your system
- Internet connection (for Gemini AI API)

### Tesseract OCR Installation

**Windows:**
1. Download Tesseract from: https://github.com/UB-Mannheim/tesseract/wiki
2. Install and add to PATH
3. Download English language data

**macOS:**
```bash
brew install tesseract
```

**Ubuntu/Debian:**
```bash
sudo apt-get update
sudo apt-get install tesseract-ocr
```

## Installation

1. **Navigate to the OCR directory:**
   ```bash
   cd OCR
   ```

2. **Install Python dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

3. **Set up Gemini API key:**
   - Get your API key from Google AI Studio
   - Update the API key in `flask_ocr_api.py` (line 22)

## Usage

### Starting the OCR API Server

1. **Run the startup script:**
   ```bash
   python start_ocr_api.py
   ```

2. **Or run directly:**
   ```bash
   python flask_ocr_api.py
   ```

The API will be available at `http://localhost:5000`

### API Endpoints

- `GET /api/health` - Health check
- `POST /api/upload-document` - Upload and process document
- `POST /api/save-claim` - Save extracted claim data
- `GET /api/claims` - Get all claims
- `GET /api/claim/<id>` - Get specific claim details
- `PUT /api/claim/<id>/status` - Update claim status

### Using the Web Interface

1. Open the FRA Claims Management page
2. Click "Upload Document" button
3. Drag and drop or browse for a document
4. Review the extracted data
5. Make corrections if needed
6. Save as a new claim

## File Structure

```
OCR/
‚îú‚îÄ‚îÄ flask_ocr_api.py          # Main Flask API server
‚îú‚îÄ‚îÄ start_ocr_api.py          # Startup script with checks
‚îú‚îÄ‚îÄ requirements.txt          # Python dependencies
‚îú‚îÄ‚îÄ fra_claims.db            # SQLite database (created automatically)
‚îú‚îÄ‚îÄ fra_extractor_app.py     # Original Streamlit app
‚îú‚îÄ‚îÄ ocr_app.py              # Simple OCR demo
‚îú‚îÄ‚îÄ gemini.py               # Gemini API test
‚îî‚îÄ‚îÄ README.md               # This file
```

## Configuration

### Tesseract Configuration
The system automatically detects Tesseract installation. For custom paths, modify the configuration in `flask_ocr_api.py`:

```python
# Windows
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Linux/Mac (usually works with default PATH)
```

### Gemini API Configuration
Update the API key in `flask_ocr_api.py`:

```python
genai.configure(api_key="YOUR_API_KEY_HERE")
```

## Database Schema

The system uses SQLite with the following schema:

```sql
CREATE TABLE fra_claim_individual (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    source_filename TEXT,
    claimant_name TEXT,
    spouse_name TEXT,
    father_or_mother_name TEXT,
    address TEXT,
    village TEXT,
    gram_panchayat TEXT,
    tehsil_taluka TEXT,
    district TEXT,
    state TEXT,
    is_scheduled_tribe TEXT,
    is_otfd TEXT,
    land_area TEXT,
    raw_text TEXT,
    ocr_confidence REAL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'pending_review'
);
```

## Troubleshooting

### Common Issues

1. **Tesseract not found:**
   - Ensure Tesseract is installed and in PATH
   - Check the configuration in `flask_ocr_api.py`

2. **Gemini API errors:**
   - Verify your API key is correct
   - Check your internet connection
   - Ensure you have API quota remaining

3. **PDF processing fails:**
   - Install poppler-utils: `sudo apt-get install poppler-utils` (Linux)
   - For Windows, download poppler and update the path

4. **Database errors:**
   - Check file permissions in the OCR directory
   - Ensure SQLite is working properly

### Debug Mode

Run with debug mode for detailed error messages:

```bash
python flask_ocr_api.py
```

## Integration with FRA Atlas

The OCR system integrates seamlessly with the TribalVision:

1. **Frontend Integration**: The claims management page includes upload functionality
2. **Data Flow**: Documents ‚Üí OCR ‚Üí AI Extraction ‚Üí Database ‚Üí WebGIS Display
3. **Verification Workflow**: Human review and correction before final approval

## Security Considerations

- API keys should be stored securely (use environment variables in production)
- File uploads should be validated and sanitized
- Database should be backed up regularly
- Consider rate limiting for production use

## Performance Tips

- Use high-quality scans (300 DPI) for better OCR accuracy
- Process documents in batches for efficiency
- Monitor API quotas for Gemini usage
- Consider caching for frequently accessed data

## Support

For issues or questions:
1. Check the troubleshooting section above
2. Review the API logs for error messages
3. Ensure all dependencies are properly installed
4. Verify system requirements are met



================================================
FILE: OCR/debug_claimant.py
================================================
#!/usr/bin/env python3
"""
Debug claimant name extraction
"""

import re

sample_text = """'Name of the claimant 6): KBPCOES
'Name of the spouse KBPCOES1"""

print("Sample text:")
print(repr(sample_text))
print()

# Test different patterns
patterns = [
    r'Name of the claimant[:\s]*[0-9]*\)?\s*([A-Za-z\s]+?)(?=\n|Name of the spouse|$)',
    r'Name of the claimant[:\s]*[0-9]*\)?\s*([A-Za-z\s]+)',
    r'Name of the claimant[:\s]*([A-Za-z\s]+?)(?=\n|Name of the spouse|$)',
    r'Name of the claimant[:\s]*([A-Za-z\s]+)',
    r'Name of the claimant[:\s]*[0-9]*\)?\s*([A-Za-z0-9\s]+?)(?=\n|Name of the spouse|$)',
    r'Name of the claimant[:\s]*[0-9]*\)?\s*([A-Za-z0-9\s]+)',
]

for i, pattern in enumerate(patterns):
    print(f"Pattern {i+1}: {pattern}")
    match = re.search(pattern, sample_text, re.IGNORECASE)
    if match:
        print(f"  Match: '{match.group(1)}'")
    else:
        print("  No match")
    print()

# Test with simpler approach
print("Testing simpler approach:")
simple_patterns = [
    r'Name of the claimant[^:]*:\s*([A-Za-z\s]+)',
    r'Name of the claimant[^:]*:\s*([A-Za-z0-9\s]+)',
    r'Name of the claimant[^:]*:\s*([A-Za-z0-9\s]+?)(?=\n|Name of the spouse)',
]

for i, pattern in enumerate(simple_patterns):
    print(f"Simple pattern {i+1}: {pattern}")
    match = re.search(pattern, sample_text, re.IGNORECASE)
    if match:
        print(f"  Match: '{match.group(1)}'")
    else:
        print("  No match")
    print()








================================================
FILE: OCR/debug_extraction.py
================================================
#!/usr/bin/env python3
"""
Debug script to test OCR extraction
"""

import os
import sys
import json
import re
from typing import Dict, Optional

# Fix numpy import issue
current_dir = os.getcwd()
if current_dir in sys.path:
    sys.path.remove(current_dir)

# Change to safe directory
os.chdir('/tmp')

# Add OCR directory to path
sys.path.append('/Users/ashayvairat/Public/FRA/fra_atlas_webgis version 7/OCR')

def fallback_extract_with_regex(raw_text: str) -> Dict[str, Optional[str]]:
    """Fallback extraction using regex patterns for common FRA form fields"""
    extracted = {
        "claimant_name": "", "spouse_name": "", "father_or_mother_name": "", 
        "address": "", "village": "", "gram_panchayat": "", "tehsil_taluka": "", 
        "district": "", "state": "", "is_scheduled_tribe": "", "is_otfd": "", "land_area": ""
    }
    
    try:
        print(f"Processing text: {raw_text[:200]}...")
        
        # Extract claimant name - look for patterns like "Name of the claimant" or "Claimant:"
        claimant_patterns = [
            r'Name of the claimant[:\s]*([A-Za-z\s]+)',
            r'Claimant[:\s]*([A-Za-z\s]+)',
            r'Name[:\s]*([A-Za-z\s]{3,})',
        ]
        
        for pattern in claimant_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found claimant match: '{name}'")
                if len(name) > 2 and not any(word in name.lower() for word in ['form', 'claim', 'rights', 'forest']):
                    extracted["claimant_name"] = name
                    break
        
        # Extract spouse name
        spouse_patterns = [
            r'Name of the spouse[:\s]*([A-Za-z\s]+)',
            r'Spouse[:\s]*([A-Za-z\s]+)',
        ]
        
        for pattern in spouse_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found spouse match: '{name}'")
                if len(name) > 2:
                    extracted["spouse_name"] = name
                    break
        
        # Extract father/mother name
        parent_patterns = [
            r'Name of father[:\s]*([A-Za-z\s]+)',
            r'Name of mother[:\s]*([A-Za-z\s]+)',
            r'Father[:\s]*([A-Za-z\s]+)',
            r'Mother[:\s]*([A-Za-z\s]+)',
        ]
        
        for pattern in parent_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found parent match: '{name}'")
                if len(name) > 2:
                    extracted["father_or_mother_name"] = name
                    break
        
        # Extract village
        village_patterns = [
            r'Village[:\s]*([A-Za-z\s,]+)',
            r'Village[:\s]*([A-Za-z\s]+)',
        ]
        
        for pattern in village_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                village = match.group(1).strip().rstrip(',').strip()
                print(f"Found village match: '{village}'")
                if len(village) > 2:
                    extracted["village"] = village
                    break
        
        # Extract district
        district_patterns = [
            r'District[:\s]*([A-Za-z\s]+)',
            r'District[:\s]*([A-Za-z\s,]+)',
        ]
        
        for pattern in district_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                district = match.group(1).strip().rstrip(',').strip()
                print(f"Found district match: '{district}'")
                if len(district) > 2:
                    extracted["district"] = district
                    break
        
        # Extract address
        address_patterns = [
            r'Address[:\s]*([A-Za-z0-9\s,.-]+?)(?=Village|District|$)',
            r'Address[:\s]*([A-Za-z0-9\s,.-]+)',
        ]
        
        for pattern in address_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE | re.DOTALL)
            if match:
                address = match.group(1).strip()
                print(f"Found address match: '{address}'")
                if len(address) > 5:
                    extracted["address"] = address
                    break
        
        print(f"Final extraction result: {extracted}")
        return extracted
        
    except Exception as e:
        print(f"Fallback extraction failed: {e}")
        return extracted

# Test with sample text
sample_text = """(Becoprion of Fores Fight) Rae, 2008

ANNEXURE -I
[See rule 6()]
FORM-A
CLAIM FORM FOR RIGHTS TO FOREST LAND
[See rule 11(1)(a)]

'Name of the claimant 6): KBPCOES
'Name of the spouse KBPCOES1
'Name of father/ mother KBPCOES2
Adaress: SADAR BAZAR
Village: SATARA,
Gram Panchayat: SATARAL
'Tehsil! Taluka: SATARAD
District SATARA
@) Scheduled Tribe: Yes/No
(Attach authenticated copy of Certificate)
(¬© Other Traditional Forest Dweller: Yes/No"""

if __name__ == "__main__":
    result = fallback_extract_with_regex(sample_text)
    print("\n" + "="*50)
    print("EXTRACTION RESULT:")
    print("="*50)
    for key, value in result.items():
        print(f"{key}: '{value}'")








================================================
FILE: OCR/demo_usage.py
================================================
#!/usr/bin/env python3
"""
Demo script showing how to use the FRA OCR API
This script demonstrates the complete workflow from document upload to claim saving
"""

import requests
import json
import os
from PIL import Image, ImageDraw, ImageFont
import io

# API base URL
API_BASE = "http://localhost:5000"

def create_sample_document():
    """Create a sample FRA claim document for testing"""
    print("üìÑ Creating sample FRA claim document...")
    
    # Create a sample image with FRA claim text
    img = Image.new('RGB', (800, 600), color='white')
    draw = ImageDraw.Draw(img)
    
    try:
        font = ImageFont.load_default()
    except:
        font = None
    
    # Add sample FRA claim text
    text_lines = [
        "FOREST RIGHTS ACT CLAIM FORM",
        "",
        "Claimant Name: Ramesh Kumar Gond",
        "Spouse Name: Sunita Gond",
        "Father's Name: Late Ram Singh Gond",
        "",
        "Address: Village - Jagdalpur",
        "Gram Panchayat: Jagdalpur",
        "Tehsil: Jagdalpur",
        "District: Bastar",
        "State: Chhattisgarh",
        "",
        "Land Area: 2.5 hectares",
        "Scheduled Tribe: Yes",
        "OTFD: No",
        "",
        "Land Description:",
        "Agricultural land with forest cover",
        "Located near village boundary",
        "Traditional cultivation area"
    ]
    
    y_position = 50
    for line in text_lines:
        draw.text((50, y_position), line, fill='black', font=font)
        y_position += 25
    
    # Save the sample document
    sample_file = "sample_fra_claim.png"
    img.save(sample_file)
    print(f"‚úÖ Created sample document: {sample_file}")
    return sample_file

def test_api_health():
    """Test if the API is running"""
    print("üîç Testing API health...")
    try:
        response = requests.get(f"{API_BASE}/api/health")
        if response.status_code == 200:
            print("‚úÖ API is running")
            return True
        else:
            print(f"‚ùå API health check failed: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Cannot connect to API. Make sure the server is running.")
        return False

def upload_document(file_path):
    """Upload a document for OCR processing"""
    print(f"üì§ Uploading document: {file_path}")
    
    try:
        with open(file_path, 'rb') as file:
            files = {'file': file}
            response = requests.post(f"{API_BASE}/api/upload-document", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Document uploaded and processed successfully")
            print(f"   Confidence: {data.get('confidence', 0):.1f}%")
            print(f"   Extracted fields: {len(data.get('extracted_data', {}))}")
            return data
        else:
            print(f"‚ùå Upload failed: {response.status_code}")
            print(f"   Error: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Upload error: {e}")
        return None

def save_claim(ocr_data):
    """Save the extracted data as a claim"""
    print("üíæ Saving claim to database...")
    
    try:
        # Prepare the data for saving
        claim_data = {
            "filename": ocr_data.get("filename", ""),
            "claimant_name": ocr_data.get("extracted_data", {}).get("claimant_name", ""),
            "spouse_name": ocr_data.get("extracted_data", {}).get("spouse_name", ""),
            "father_or_mother_name": ocr_data.get("extracted_data", {}).get("father_or_mother_name", ""),
            "village": ocr_data.get("extracted_data", {}).get("village", ""),
            "district": ocr_data.get("extracted_data", {}).get("district", ""),
            "land_area": ocr_data.get("extracted_data", {}).get("land_area", ""),
            "is_scheduled_tribe": ocr_data.get("extracted_data", {}).get("is_scheduled_tribe", ""),
            "full_address": ocr_data.get("full_address", ""),
            "raw_text": ocr_data.get("raw_text", ""),
            "confidence": ocr_data.get("confidence", 0)
        }
        
        response = requests.post(
            f"{API_BASE}/api/save-claim",
            headers={'Content-Type': 'application/json'},
            json=claim_data
        )
        
        if response.status_code == 200:
            print("‚úÖ Claim saved successfully")
            return True
        else:
            print(f"‚ùå Save failed: {response.status_code}")
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Save error: {e}")
        return False

def get_claims():
    """Retrieve all claims from the database"""
    print("üìã Retrieving claims from database...")
    
    try:
        response = requests.get(f"{API_BASE}/api/claims")
        
        if response.status_code == 200:
            data = response.json()
            claims = data.get("claims", [])
            print(f"‚úÖ Retrieved {len(claims)} claims")
            
            for claim in claims:
                print(f"   - {claim.get('claimant_name', 'Unknown')} from {claim.get('village', 'Unknown')}")
            
            return claims
        else:
            print(f"‚ùå Retrieval failed: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå Retrieval error: {e}")
        return []

def display_extracted_data(ocr_data):
    """Display the extracted data in a formatted way"""
    print("\nüìä Extracted Data:")
    print("=" * 50)
    
    extracted = ocr_data.get("extracted_data", {})
    
    fields = [
        ("Claimant Name", "claimant_name"),
        ("Spouse Name", "spouse_name"),
        ("Father/Mother Name", "father_or_mother_name"),
        ("Village", "village"),
        ("District", "district"),
        ("Land Area", "land_area"),
        ("Scheduled Tribe", "is_scheduled_tribe")
    ]
    
    for label, key in fields:
        value = extracted.get(key, "Not found")
        print(f"{label:20}: {value}")
    
    print(f"\nFull Address: {ocr_data.get('full_address', 'Not found')}")
    print(f"OCR Confidence: {ocr_data.get('confidence', 0):.1f}%")
    
    # Show raw OCR text (truncated)
    raw_text = ocr_data.get("raw_text", "")
    if raw_text:
        print(f"\nRaw OCR Text (first 200 chars):")
        print("-" * 50)
        print(raw_text[:200] + "..." if len(raw_text) > 200 else raw_text)

def main():
    """Main demo function"""
    print("üöÄ FRA OCR API Demo")
    print("=" * 50)
    
    # Step 1: Check API health
    if not test_api_health():
        print("\n‚ùå Please start the OCR API server first:")
        print("   python start_ocr_api.py")
        return
    
    # Step 2: Create sample document
    sample_file = create_sample_document()
    
    try:
        # Step 3: Upload and process document
        ocr_data = upload_document(sample_file)
        if not ocr_data:
            return
        
        # Step 4: Display extracted data
        display_extracted_data(ocr_data)
        
        # Step 5: Save claim
        if save_claim(ocr_data):
            print("\n‚úÖ Demo completed successfully!")
            
            # Step 6: Retrieve and display claims
            get_claims()
        
    finally:
        # Clean up sample file
        if os.path.exists(sample_file):
            os.remove(sample_file)
            print(f"\nüßπ Cleaned up sample file: {sample_file}")

if __name__ == "__main__":
    main()



================================================
FILE: OCR/flask_ocr_api.py
================================================
# flask_ocr_api.py
import os
import json
import sqlite3
from datetime import datetime
from typing import Dict, Optional
import base64
import io
import sys
import re

# Fix numpy import issue by removing current directory from path
current_dir = os.getcwd()
if current_dir in sys.path:
    sys.path.remove(current_dir)

# Additional numpy fix - ensure we're not in a numpy source directory
os.chdir('/tmp')  # Change to a safe directory temporarily

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import pytesseract
import pandas as pd
from PIL import Image
from pdf2image import convert_from_bytes
import google.generativeai as genai

# ----------------- CONFIG -----------------
# Configure Tesseract path for different OS
if os.name == 'nt':  # Windows
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    os.environ["TESSDATA_PREFIX"] = r"C:\Program Files\Tesseract-OCR\tessdata"
else:  # Linux/Mac
    # Default paths for Linux/Mac
    pass

DB_FILE = "fra_claims.db"
POPPLER_PATH = None

# ----------------- Gemini API -----------------
genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
GEMINI_MODEL = "gemini-2.0-flash"

app = Flask(__name__)
CORS(app)

# ----------------- Database Functions -----------------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fra_claim_individual (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            source_filename TEXT,
            claimant_name TEXT,
            spouse_name TEXT,
            father_or_mother_name TEXT,
            address TEXT,
            village TEXT,
            gram_panchayat TEXT,
            tehsil_taluka TEXT,
            district TEXT,
            state TEXT,
            is_scheduled_tribe TEXT,
            is_otfd TEXT,
            land_area TEXT,
            raw_text TEXT,
            ocr_confidence REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'pending_review'
        )
    """)
    conn.commit()
    conn.close()

def save_to_db(record: Dict):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    keys = list(record.keys())
    placeholders = ", ".join(["?"] * len(keys))
    cols = ", ".join(keys)
    values = [record[k] for k in keys]
    sql = f"INSERT INTO fra_claim_individual ({cols}) VALUES ({placeholders})"
    cur.execute(sql, values)
    conn.commit()
    conn.close()

def get_claims():
    conn = sqlite3.connect(DB_FILE)
    df = pd.read_sql_query("""
        SELECT id, source_filename, claimant_name, village, district, 
               land_area, status, created_at 
        FROM fra_claim_individual 
        ORDER BY created_at DESC
    """, conn)
    conn.close()
    return df.to_dict('records')

# ----------------- OCR Functions -----------------
def ocr_image(image: Image.Image) -> tuple[str, float]:
    """Extract text from image and return text with confidence score"""
    try:
        # Get OCR data with confidence scores
        data = pytesseract.image_to_data(image, output_type=pytesseract.Output.DICT)
        text = pytesseract.image_to_string(image, lang="eng")
        
        # Calculate average confidence
        confidences = [int(conf) for conf in data['conf'] if int(conf) > 0]
        avg_confidence = sum(confidences) / len(confidences) if confidences else 0
        
        return text, avg_confidence
    except Exception as e:
        print(f"OCR failed: {e}")
        return "", 0.0

def ocr_pdf_bytes(pdf_bytes: bytes) -> tuple[str, float]:
    """Extract text from PDF and return text with confidence score"""
    try:
        images = convert_from_bytes(pdf_bytes, dpi=300, poppler_path=POPPLER_PATH)
        all_texts = []
        all_confidences = []
        
        for img in images:
            text, confidence = ocr_image(img)
            all_texts.append(text)
            all_confidences.append(confidence)
        
        combined_text = "\n".join(all_texts)
        avg_confidence = sum(all_confidences) / len(all_confidences) if all_confidences else 0
        
        return combined_text, avg_confidence
    except Exception as e:
        print(f"PDF OCR failed: {e}")
        return "", 0.0

def human_like_extract_with_gemini(raw_text: str) -> Dict[str, Optional[str]]:
    """Use Gemini to extract structured fields from OCR text"""
    prompt = f"""
    You are an expert in interpreting FRA (Forest Rights Act) Claim Forms (Form A). 
    
    Task:
    - Analyze the OCR text below from a FRA claim form.
    - Extract the following fields with high accuracy:
      - claimant_name: Name of the person making the claim
      - spouse_name: Name of the spouse (if mentioned)
      - father_or_mother_name: Father's or mother's name
      - address: Complete address
      - village: Village name
      - gram_panchayat: Gram Panchayat name
      - tehsil_taluka: Tehsil or Taluka name
      - district: District name
      - state: State name
      - is_scheduled_tribe: "Yes" or "No" for Scheduled Tribe status
      - is_otfd: "Yes" or "No" for Other Traditional Forest Dweller status
      - land_area: Area of land claimed (in hectares, acres, etc.)
    
    Instructions:
    - Only extract information that is clearly present in the document
    - If a field is missing, unclear, or not mentioned, use empty string ""
    - For Yes/No fields, use exactly "Yes" or "No" or empty string if not specified
    - Clean up any OCR errors in names and addresses
    - Return ONLY a valid JSON dictionary with the exact keys listed above
    
    OCR Text:
    ---
    {raw_text}
    ---
    
    Return only the JSON response:
    """
    
    try:
        model = genai.GenerativeModel(GEMINI_MODEL)
        response = model.generate_content(prompt)
        
        # Clean up Gemini response
        cleaned = response.text.strip()
        
        # Remove markdown code blocks
        if cleaned.startswith("```json"):
            cleaned = cleaned[7:]
        elif cleaned.startswith("```"):
            cleaned = cleaned[3:]
        
        if cleaned.endswith("```"):
            cleaned = cleaned[:-3]
            
        # Remove any leading/trailing whitespace and newlines
        cleaned = cleaned.strip()
        
        # Try to find JSON in the response
        if "{" in cleaned and "}" in cleaned:
            start = cleaned.find("{")
            end = cleaned.rfind("}") + 1
            cleaned = cleaned[start:end]
        
        # Parse JSON
        extracted = json.loads(cleaned)
        
        # Ensure all required keys exist with empty strings as defaults
        required_keys = [
            "claimant_name", "spouse_name", "father_or_mother_name", "address", 
            "village", "gram_panchayat", "tehsil_taluka", "district", "state", 
            "is_scheduled_tribe", "is_otfd", "land_area"
        ]
        
        for key in required_keys:
            if key not in extracted:
                extracted[key] = ""
            elif extracted[key] is None:
                extracted[key] = ""
            else:
                # Clean up the extracted value
                extracted[key] = str(extracted[key]).strip()
        
        print(f"Successfully extracted data: {extracted}")
        return extracted
        
    except json.JSONDecodeError as e:
        print(f"JSON parsing failed: {e}")
        print(f"Raw response: {response.text if 'response' in locals() else 'No response'}")
        # Return empty structure if JSON parsing fails
        return {
            "claimant_name": "", "spouse_name": "", "father_or_mother_name": "", 
            "address": "", "village": "", "gram_panchayat": "", "tehsil_taluka": "", 
            "district": "", "state": "", "is_scheduled_tribe": "", "is_otfd": "", "land_area": ""
        }
    except Exception as e:
        print(f"Gemini extraction failed: {e}")
        return {
            "claimant_name": "", "spouse_name": "", "father_or_mother_name": "", 
            "address": "", "village": "", "gram_panchayat": "", "tehsil_taluka": "", 
            "district": "", "state": "", "is_scheduled_tribe": "", "is_otfd": "", "land_area": ""
        }

def fallback_extract_with_regex(raw_text: str) -> Dict[str, Optional[str]]:
    """Fallback extraction using regex patterns for common FRA form fields"""
    extracted = {
        "claimant_name": "", "spouse_name": "", "father_or_mother_name": "", 
        "address": "", "village": "", "gram_panchayat": "", "tehsil_taluka": "", 
        "district": "", "state": "", "is_scheduled_tribe": "", "is_otfd": "", "land_area": ""
    }
    
    try:
        print(f"Fallback extraction starting with text: {raw_text[:200]}...")
        
        # Extract claimant name - look for patterns like "Name of the claimant" or "Claimant:"
        claimant_patterns = [
            r'Name of the claimant[^:]*:\s*([A-Za-z0-9\s]+?)(?=\n|Name of the spouse)',
            r'Name of the claimant[^:]*:\s*([A-Za-z0-9\s]+)',
            r'Claimant[:\s]*([A-Za-z\s]+)',
        ]
        
        for pattern in claimant_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                if len(name) > 2 and not any(word in name.lower() for word in ['form', 'claim', 'rights', 'forest']):
                    extracted["claimant_name"] = name
                    break
        
        # Extract spouse name
        spouse_patterns = [
            r'Name of the spouse[:\s]*([A-Za-z0-9\s]+?)(?=\n|Name of father|Name of mother|$)',
            r'Name of the spouse[:\s]*([A-Za-z0-9\s]+)',
            r'Spouse[:\s]*([A-Za-z0-9\s]+)',
        ]
        
        for pattern in spouse_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                if len(name) > 2:
                    extracted["spouse_name"] = name
                    break
        
        # Extract father/mother name
        parent_patterns = [
            r'Name of father[:\s]*([A-Za-z\s]+?)(?=\n|Address|$)',
            r'Name of mother[:\s]*([A-Za-z\s]+?)(?=\n|Address|$)',
            r'Name of father[:\s]*([A-Za-z\s]+)',
            r'Name of mother[:\s]*([A-Za-z\s]+)',
            r'Father[:\s]*([A-Za-z\s]+)',
            r'Mother[:\s]*([A-Za-z\s]+)',
        ]
        
        for pattern in parent_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                if len(name) > 2:
                    extracted["father_or_mother_name"] = name
                    break
        
        # Extract village
        village_patterns = [
            r'Village[:\s]*([A-Za-z0-9\s,]+?)(?=\n|Gram Panchayat|Tehsil|District|$)',
            r'Village[:\s]*([A-Za-z0-9\s,]+)',
        ]
        
        for pattern in village_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                village = match.group(1).strip().rstrip(',').strip()
                if len(village) > 2:
                    extracted["village"] = village
                    break
        
        # Extract district
        district_patterns = [
            r'District[:\s]*([A-Za-z\s]+)',
            r'District[:\s]*([A-Za-z\s,]+)',
        ]
        
        for pattern in district_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                district = match.group(1).strip().rstrip(',').strip()
                if len(district) > 2:
                    extracted["district"] = district
                    break
        
        # Extract address
        address_patterns = [
            r'Address[:\s]*([A-Za-z0-9\s,.-]+?)(?=Village|District|$)',
            r'Address[:\s]*([A-Za-z0-9\s,.-]+)',
        ]
        
        for pattern in address_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE | re.DOTALL)
            if match:
                address = match.group(1).strip()
                if len(address) > 5:
                    extracted["address"] = address
                    break
        
        # Extract land area
        area_patterns = [
            r'(\d+\.?\d*)\s*(hectares?|acres?|ha|ac)',
            r'Area[:\s]*(\d+\.?\d*)\s*(hectares?|acres?|ha|ac)',
            r'(\d+\.?\d*)\s*(hectares?|acres?)',
        ]
        
        for pattern in area_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                area = f"{match.group(1)} {match.group(2)}"
                extracted["land_area"] = area
                break
        
        # Extract Scheduled Tribe status
        st_patterns = [
            r'Scheduled Tribe[:\s]*(Yes|No)',
            r'ST[:\s]*(Yes|No)',
        ]
        
        for pattern in st_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                extracted["is_scheduled_tribe"] = match.group(1).strip()
                break
        
        # Extract OTFD status
        otfd_patterns = [
            r'Other Traditional Forest Dweller[:\s]*(Yes|No)',
            r'OTFD[:\s]*(Yes|No)',
        ]
        
        for pattern in otfd_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                extracted["is_otfd"] = match.group(1).strip()
                break
        
        print(f"Fallback extraction completed: {extracted}")
        return extracted
        
    except Exception as e:
        print(f"Fallback extraction failed: {e}")
        return extracted

def build_full_address(extracted: dict) -> str:
    """Build full address from extracted components"""
    parts = [
        extracted.get("address", ""),
        extracted.get("village", ""),
        extracted.get("gram_panchayat", ""),
        extracted.get("tehsil_taluka", ""),
        extracted.get("district", ""),
        extracted.get("state", "")
    ]
    full_address = ", ".join([p.strip().strip(".") for p in parts if p and p.strip()])
    return full_address

# ----------------- API Routes -----------------
@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "message": "FRA OCR API is running"})

@app.route('/api/upload-document', methods=['POST'])
def upload_document():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        # Read file content
        file_content = file.read()
        filename = file.filename
        
        # Process based on file type
        if filename.lower().endswith('.pdf'):
            raw_text, confidence = ocr_pdf_bytes(file_content)
        else:
            # Handle image files
            image = Image.open(io.BytesIO(file_content)).convert("RGB")
            raw_text, confidence = ocr_image(image)
        
        if not raw_text.strip():
            return jsonify({"error": "No text could be extracted from the document"}), 400
        
        # Extract structured data using Gemini with fallback
        print(f"Starting extraction for text: {raw_text[:200]}...")
        extracted_data = human_like_extract_with_gemini(raw_text)
        print(f"Gemini extraction result: {extracted_data}")
        
        # If Gemini extraction failed or returned mostly empty data, use fallback
        if not extracted_data or all(not v or v.strip() == "" for v in extracted_data.values()):
            print("Gemini extraction failed or returned empty data, using fallback extraction")
            extracted_data = fallback_extract_with_regex(raw_text)
            print(f"Fallback extraction result: {extracted_data}")
        
        # Build full address
        full_address = build_full_address(extracted_data)
        
        # Prepare response
        response_data = {
            "filename": filename,
            "raw_text": raw_text,
            "confidence": confidence,
            "extracted_data": extracted_data,
            "full_address": full_address,
            "processing_time": datetime.now().isoformat()
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({"error": f"Processing failed: {str(e)}"}), 500

@app.route('/api/save-claim', methods=['POST'])
def save_claim():
    try:
        data = request.get_json()
        
        # Prepare record for database
        record = {
            "source_filename": data.get("filename", ""),
            "claimant_name": data.get("claimant_name", ""),
            "spouse_name": data.get("spouse_name", ""),
            "father_or_mother_name": data.get("father_or_mother_name", ""),
            "address": data.get("full_address", ""),
            "village": data.get("village", ""),
            "gram_panchayat": data.get("gram_panchayat", ""),
            "tehsil_taluka": data.get("tehsil_taluka", ""),
            "district": data.get("district", ""),
            "state": data.get("state", ""),
            "is_scheduled_tribe": data.get("is_scheduled_tribe", ""),
            "is_otfd": data.get("is_otfd", ""),
            "land_area": data.get("land_area", ""),
            "raw_text": data.get("raw_text", ""),
            "ocr_confidence": data.get("confidence", 0.0),
            "status": "pending_review"
        }
        
        # Save to database
        save_to_db(record)
        
        return jsonify({"message": "Claim saved successfully", "status": "success"})
        
    except Exception as e:
        return jsonify({"error": f"Failed to save claim: {str(e)}"}), 500

@app.route('/api/claims', methods=['GET'])
def get_claims_api():
    try:
        claims = get_claims()
        return jsonify({"claims": claims, "count": len(claims)})
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claims: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>', methods=['GET'])
def get_claim_details(claim_id):
    try:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("SELECT * FROM fra_claim_individual WHERE id = ?", (claim_id,))
        row = cur.fetchone()
        conn.close()
        
        if not row:
            return jsonify({"error": "Claim not found"}), 404
        
        # Convert to dict
        columns = [description[0] for description in cur.description]
        claim_data = dict(zip(columns, row))
        
        return jsonify(claim_data)
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claim: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>/status', methods=['PUT'])
def update_claim_status(claim_id):
    try:
        data = request.get_json()
        new_status = data.get('status')
        
        if not new_status:
            return jsonify({"error": "Status is required"}), 400
        
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("UPDATE fra_claim_individual SET status = ? WHERE id = ?", (new_status, claim_id))
        conn.commit()
        conn.close()
        
        return jsonify({"message": "Status updated successfully"})
    except Exception as e:
        return jsonify({"error": f"Failed to update status: {str(e)}"}), 500

if __name__ == '__main__':
    init_db()
    app.run(debug=True, host='0.0.0.0', port=5000)



================================================
FILE: OCR/fra_extractor_app.py
================================================
# fra_extractor_app.py
import os
import sqlite3
import json
from typing import Dict, Optional

import streamlit as st
import pytesseract
import pandas as pd
from PIL import Image
from pdf2image import convert_from_bytes
import google.generativeai as genai

# ----------------- CONFIG -----------------
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
os.environ["TESSDATA_PREFIX"] = r"C:\Program Files\Tesseract-OCR\tessdata"

DB_FILE = "fra_claims.db"
POPPLER_PATH = None

# ----------------- Gemini API -----------------
genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
GEMINI_MODEL = "gemini-2.0-flash"

def human_like_extract_with_gemini(raw_text: str) -> Dict[str, Optional[str]]:
    """
    Gemini reads the OCR text and produces structured fields
    like a human would, based only on the content present.
    """
    prompt = f"""
You are an expert in interpreting FRA Claim Forms (Form A). 

Task:
- Analyze the OCR text below.
- Extract all the following fields: 
  claimant_name, spouse_name, father_or_mother_name, address, village, gram_panchayat,
  tehsil_taluka, district, state, is_scheduled_tribe, is_otfd.

- Only use the information present in the document.
- If a field is missing or unclear, leave it blank ("").
- Avoid inventing any values.
- Return a **JSON dictionary** only, keys as above, values as strings or empty.

OCR Text:
---
{raw_text}
"""
    try:
        model = genai.GenerativeModel(GEMINI_MODEL)
        response = model.generate_content(prompt)

        st.subheader("üîπ Gemini Raw Response")
        st.text(response.text[:4000])  # preview first 4000 chars

        # Clean up Gemini response
        cleaned = response.text.strip()
        if cleaned.startswith("```"):
            # Drop the ```json ... ``` fences
            parts = cleaned.split("```")
            if len(parts) >= 2:
                cleaned = parts[1]
        if cleaned.lower().startswith("json"):
            cleaned = cleaned[4:]
        cleaned = cleaned.strip("` \n")

        # Parse safely
        extracted = json.loads(cleaned)
        return extracted
    except Exception as e:
        st.warning(f"Gemini extraction failed: {e}")
        return {}

# ----------------- Address Builder -----------------
def build_full_address(extracted: dict) -> str:
    parts = [
        extracted.get("address", ""),
        extracted.get("village", ""),
        extracted.get("gram_panchayat", ""),
        extracted.get("tehsil_taluka", ""),
        extracted.get("district", ""),
        extracted.get("state", "")
    ]
    # Strip dots/extra spaces and join
    full_address = ", ".join([p.strip().strip(".") for p in parts if p and p.strip()])
    return full_address

# ----------------- DB Utilities -----------------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    # Stable schema: we keep using "address" for full combined address
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fra_claim_individual (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            source_filename TEXT,
            claimant_name TEXT,
            spouse_name TEXT,
            father_or_mother_name TEXT,
            address TEXT,
            is_scheduled_tribe TEXT,
            is_otfd TEXT,
            raw_text TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def save_to_db(record: Dict):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    keys = list(record.keys())
    placeholders = ", ".join(["?"] * len(keys))
    cols = ", ".join(keys)
    values = [record[k] for k in keys]
    sql = f"INSERT INTO fra_claim_individual ({cols}) VALUES ({placeholders})"
    cur.execute(sql, values)
    conn.commit()
    conn.close()

def query_db(query: str, params: tuple = ()):
    conn = sqlite3.connect(DB_FILE)
    df = pd.read_sql_query(query, conn, params=params)
    conn.close()
    return df

# ----------------- OCR -----------------
def ocr_image(image: Image.Image) -> str:
    try:
        text = pytesseract.image_to_string(image, lang="eng")
    except pytesseract.pytesseract.TesseractError as e:
        st.error("Tesseract OCR failed. Check installation.")
        raise e
    return text

def ocr_pdf_bytes(pdf_bytes: bytes) -> str:
    images = convert_from_bytes(pdf_bytes, dpi=300, poppler_path=POPPLER_PATH)
    texts = []
    for idx, img in enumerate(images):
        st.subheader(f"üñº OCR Page {idx+1} Preview")
        st.image(img, use_column_width=True)
        texts.append(ocr_image(img))
    return "\n".join(texts)

# ----------------- Streamlit UI -----------------
st.set_page_config(page_title="FRA Claim Extractor", layout="wide")
init_db()

st.title("üå≥ FRA Claim Form Extractor (Form A)")
st.write("Upload scanned FRA claim forms (Form A). The app will OCR ‚Üí Gemini ‚Üí build full address ‚Üí save in SQLite DB.")

col1, col2 = st.columns([1, 1])

with col1:
    uploaded_file = st.file_uploader("Upload a document (PDF / JPG / PNG)", type=["pdf", "jpg", "jpeg", "png"])
    if uploaded_file:
        st.info(f"Processing: {uploaded_file.name}")
        raw_text = ""
        try:
            if uploaded_file.type == "application/pdf" or uploaded_file.name.lower().endswith(".pdf"):
                pdf_bytes = uploaded_file.read()
                raw_text = ocr_pdf_bytes(pdf_bytes)
            else:
                image = Image.open(uploaded_file).convert("RGB")
                st.subheader("üñº Uploaded Image Preview")
                st.image(image, use_column_width=True)
                raw_text = ocr_image(image)
        except Exception as e:
            st.error("OCR failed: " + str(e))
            raw_text = ""

        if raw_text:
            st.subheader("üìù Raw OCR Text (Preview first 4000 chars)")
            st.text_area("Raw OCR Text", raw_text[:4000], height=250)

            extracted = human_like_extract_with_gemini(raw_text)
            st.subheader("‚ú® Gemini Extracted Fields")
            st.json(extracted)

            full_address = build_full_address(extracted)
            st.subheader("üìå Full Combined Address")
            st.write(full_address)

            record = {
                "source_filename": uploaded_file.name,
                "claimant_name": extracted.get("claimant_name", ""),
                "spouse_name": extracted.get("spouse_name", ""),
                "father_or_mother_name": extracted.get("father_or_mother_name", ""),
                "address": full_address,  # full address stored in "address"
                "is_scheduled_tribe": extracted.get("is_scheduled_tribe", ""),
                "is_otfd": extracted.get("is_otfd", ""),
                "raw_text": raw_text
            }

            st.subheader("üíæ Final Record to Save in DB")
            st.json(record)

            if st.button("Save Record to Database"):
                save_to_db(record)
                st.success("Saved to database successfully!")

with col2:
    st.subheader("üîé Browse Saved Records")
    df_all = query_db("SELECT id, source_filename, claimant_name, address, is_scheduled_tribe, is_otfd, created_at FROM fra_claim_individual ORDER BY created_at DESC")
    st.write(f"Total saved records: {len(df_all)}")
    st.dataframe(df_all, use_container_width=True)

    sel_id = st.number_input("Enter Record ID to view full record (or 0 to skip)", min_value=0, value=0, step=1)
    if sel_id:
        rec_df = query_db("SELECT * FROM fra_claim_individual WHERE id = ?", (sel_id,))
        if not rec_df.empty:
            rec = rec_df.iloc[0].to_dict()
            st.subheader("Full record")
            st.json(rec)
        else:
            st.warning("Record not found.")

    if not df_all.empty:
        csv_bytes = df_all.to_csv(index=False).encode("utf-8")
        st.download_button("üì• Export all records as CSV", csv_bytes, file_name="fra_records.csv", mime="text/csv")

st.markdown("---")
st.write("Notes:")
st.write("- Gemini extracts fields, and app builds a full combined address stored in the `address` column.")
st.write("- Database schema is stable, no mismatch errors.")
st.write("- For better accuracy, ensure scans are high-quality (300dpi).")



================================================
FILE: OCR/gemini.py
================================================
import google.generativeai as genai


genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
model = genai.GenerativeModel("gemini-2.0-flash")


resp = model.generate_content("Hello, test whether this model is accessible.")
print(resp.text)



================================================
FILE: OCR/hello.txt
================================================
streamlit run ocr_app.py
streamlit run fra_extractor_app.py



================================================
FILE: OCR/INTEGRATION_GUIDE.md
================================================
# FRA OCR Integration Guide

This guide explains how to integrate the OCR functionality with your TribalVision system.

## Overview

The OCR integration provides:
- **Document Upload**: Drag-and-drop interface for PDF/image uploads
- **Automated Processing**: Tesseract OCR + Gemini AI extraction
- **Data Validation**: Human review and correction interface
- **Database Integration**: Automatic saving to SQLite database
- **WebGIS Integration**: Seamless integration with existing claims management

## Quick Start

### 1. Install Dependencies

```bash
cd OCR
pip install -r requirements.txt
```

### 2. Install Tesseract OCR

**Windows:**
- Download from: https://github.com/UB-Mannheim/tesseract/wiki
- Install and add to PATH

**macOS:**
```bash
brew install tesseract
```

**Ubuntu:**
```bash
sudo apt-get install tesseract-ocr
```

### 3. Configure Gemini API

1. Get API key from Google AI Studio
2. Update `flask_ocr_api.py` line 22:
   ```python
   genai.configure(api_key="YOUR_API_KEY_HERE")
   ```

### 4. Start the OCR API

```bash
# Windows
start_ocr.bat

# Linux/Mac
./start_ocr.sh

# Or directly
python start_ocr_api.py
```

### 5. Test the Integration

```bash
python test_ocr.py
```

## Integration Points

### Frontend Integration

The OCR functionality is integrated into the FRA Claims Management page:

1. **Upload Button**: Added "Upload Document" button next to "Add New Claim"
2. **Modal Interface**: Full-screen modal for document upload and processing
3. **Progress Indicators**: Real-time processing status updates
4. **Data Preview**: Extracted data review and correction interface

### Backend Integration

1. **Flask API**: RESTful API for OCR processing
2. **Database Schema**: Extended SQLite schema for OCR data
3. **Error Handling**: Comprehensive error handling and user feedback
4. **File Validation**: File type and size validation

## API Endpoints

### Document Processing
```http
POST /api/upload-document
Content-Type: multipart/form-data

Body: file (PDF/JPG/PNG)
Response: {
  "filename": "document.pdf",
  "raw_text": "extracted text...",
  "confidence": 85.5,
  "extracted_data": {
    "claimant_name": "John Doe",
    "village": "Test Village",
    "district": "Test District"
  },
  "full_address": "Test Village, Test District"
}
```

### Save Claim
```http
POST /api/save-claim
Content-Type: application/json

Body: {
  "filename": "document.pdf",
  "claimant_name": "John Doe",
  "village": "Test Village",
  "district": "Test District",
  "land_area": "2.5",
  "is_scheduled_tribe": "Yes",
  "full_address": "Test Village, Test District",
  "raw_text": "extracted text...",
  "confidence": 85.5
}
```

### Get Claims
```http
GET /api/claims
Response: {
  "claims": [
    {
      "id": 1,
      "source_filename": "document.pdf",
      "claimant_name": "John Doe",
      "village": "Test Village",
      "district": "Test District",
      "status": "pending_review",
      "created_at": "2024-01-15T10:30:00"
    }
  ],
  "count": 1
}
```

## Data Flow

```
1. User uploads document
   ‚Üì
2. Frontend validates file type/size
   ‚Üì
3. Document sent to Flask API
   ‚Üì
4. Tesseract OCR extracts text
   ‚Üì
5. Gemini AI structures the data
   ‚Üì
6. Confidence score calculated
   ‚Üì
7. Data returned to frontend
   ‚Üì
8. User reviews/corrects data
   ‚Üì
9. Data saved to database
   ‚Üì
10. Claims table updated
```

## Configuration

### Tesseract Configuration

The system auto-detects Tesseract installation. For custom paths:

```python
# Windows
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Linux/Mac (usually works with default PATH)
```

### Database Configuration

The system uses SQLite with this schema:

```sql
CREATE TABLE fra_claim_individual (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    source_filename TEXT,
    claimant_name TEXT,
    spouse_name TEXT,
    father_or_mother_name TEXT,
    address TEXT,
    village TEXT,
    gram_panchayat TEXT,
    tehsil_taluka TEXT,
    district TEXT,
    state TEXT,
    is_scheduled_tribe TEXT,
    is_otfd TEXT,
    land_area TEXT,
    raw_text TEXT,
    ocr_confidence REAL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'pending_review'
);
```

## Error Handling

### Common Errors

1. **Tesseract not found**
   - Solution: Install Tesseract OCR
   - Check PATH configuration

2. **Gemini API errors**
   - Solution: Verify API key
   - Check internet connection
   - Verify API quota

3. **File upload errors**
   - Solution: Check file type/size
   - Verify file permissions

4. **Database errors**
   - Solution: Check SQLite installation
   - Verify file permissions

### Error Responses

```json
{
  "error": "Error message",
  "details": "Additional error details"
}
```

## Performance Optimization

### OCR Accuracy
- Use high-quality scans (300 DPI minimum)
- Ensure good contrast and lighting
- Avoid skewed or rotated documents

### Processing Speed
- Process documents in batches
- Use appropriate image resolution
- Monitor API rate limits

### Database Performance
- Regular database backups
- Index frequently queried fields
- Monitor database size

## Security Considerations

### API Security
- Use HTTPS in production
- Implement rate limiting
- Validate all inputs

### Data Privacy
- Secure API key storage
- Encrypt sensitive data
- Regular security audits

### File Handling
- Validate file types
- Scan for malware
- Limit file sizes

## Troubleshooting

### Debug Mode

Enable debug mode for detailed logging:

```python
app.run(debug=True, host='0.0.0.0', port=5000)
```

### Log Files

Check console output for error messages and processing logs.

### Test Script

Run the test script to verify all components:

```bash
python test_ocr.py
```

## Production Deployment

### Environment Variables

```bash
export GEMINI_API_KEY="your_api_key_here"
export TESSERACT_CMD="/usr/bin/tesseract"
export DATABASE_URL="sqlite:///fra_claims.db"
```

### Process Management

Use a process manager like PM2 or systemd:

```bash
# PM2
pm2 start flask_ocr_api.py --name fra-ocr-api

# systemd
sudo systemctl start fra-ocr-api
```

### Reverse Proxy

Configure Nginx or Apache as reverse proxy:

```nginx
location /api/ {
    proxy_pass http://localhost:5000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
}
```

## Monitoring

### Health Checks

```bash
curl http://localhost:5000/api/health
```

### Metrics

Monitor:
- API response times
- OCR processing accuracy
- Database performance
- Error rates

## Support

For issues or questions:
1. Check this integration guide
2. Review error logs
3. Run the test script
4. Verify all dependencies

## Future Enhancements

### Planned Features
- Batch processing
- Advanced image preprocessing
- Multi-language support
- Cloud storage integration
- Real-time collaboration

### API Versioning
- Current: v1
- Future: v2 with enhanced features

## License

This OCR integration is part of the TribalVision system and follows the same licensing terms.



================================================
FILE: OCR/minimal_ocr_api.py
================================================
# minimal_ocr_api.py
import os
import json
import sqlite3
from datetime import datetime
from typing import Dict, Optional
import base64
import io
import sys

# Fix numpy import issue by removing current directory from path
current_dir = os.getcwd()
if current_dir in sys.path:
    sys.path.remove(current_dir)

from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import google.generativeai as genai

# ----------------- CONFIG -----------------
DB_FILE = "fra_claims.db"

# ----------------- Gemini API -----------------
genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
GEMINI_MODEL = "gemini-2.0-flash"

app = Flask(__name__)
CORS(app)

# ----------------- Database Functions -----------------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fra_claim_individual (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            source_filename TEXT,
            claimant_name TEXT,
            spouse_name TEXT,
            father_or_mother_name TEXT,
            address TEXT,
            village TEXT,
            gram_panchayat TEXT,
            tehsil_taluka TEXT,
            district TEXT,
            state TEXT,
            is_scheduled_tribe TEXT,
            is_otfd TEXT,
            land_area TEXT,
            raw_text TEXT,
            ocr_confidence REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'pending_review'
        )
    """)
    conn.commit()
    conn.close()

def save_to_db(record: Dict):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    keys = list(record.keys())
    placeholders = ", ".join(["?"] * len(keys))
    cols = ", ".join(keys)
    values = [record[k] for k in keys]
    sql = f"INSERT INTO fra_claim_individual ({cols}) VALUES ({placeholders})"
    cur.execute(sql, values)
    conn.commit()
    conn.close()

def get_claims():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        SELECT id, source_filename, claimant_name, village, district, 
               land_area, status, created_at 
        FROM fra_claim_individual 
        ORDER BY created_at DESC
    """)
    rows = cur.fetchall()
    conn.close()
    
    # Convert to list of dictionaries
    claims = []
    for row in rows:
        claims.append({
            'id': row[0],
            'source_filename': row[1],
            'claimant_name': row[2],
            'village': row[3],
            'district': row[4],
            'land_area': row[5],
            'status': row[6],
            'created_at': row[7]
        })
    return claims

# ----------------- Mock OCR Functions -----------------
def mock_ocr_image(image: Image.Image) -> tuple[str, float]:
    """Mock OCR function that returns sample data"""
    # This is a mock function for demonstration
    sample_text = """
    FOREST RIGHTS ACT CLAIM FORM
    
    Claimant Name: Ramesh Kumar Gond
    Spouse Name: Sunita Gond
    Father's Name: Late Ram Singh Gond
    
    Address: Village - Jagdalpur
    Gram Panchayat: Jagdalpur
    Tehsil: Jagdalpur
    District: Bastar
    State: Chhattisgarh
    
    Land Area: 2.5 hectares
    Scheduled Tribe: Yes
    OTFD: No
    
    Land Description:
    Agricultural land with forest cover
    Located near village boundary
    Traditional cultivation area
    """
    return sample_text, 85.0

def mock_ocr_pdf_bytes(pdf_bytes: bytes) -> tuple[str, float]:
    """Mock PDF OCR function"""
    return mock_ocr_image(None)

def human_like_extract_with_gemini(raw_text: str) -> Dict[str, Optional[str]]:
    """Use Gemini to extract structured fields from OCR text"""
    prompt = f"""
    You are an expert in interpreting FRA Claim Forms (Form A). 
    
    Task:
    - Analyze the OCR text below.
    - Extract all the following fields: 
      claimant_name, spouse_name, father_or_mother_name, address, village, gram_panchayat,
      tehsil_taluka, district, state, is_scheduled_tribe, is_otfd, land_area.
    
    - Only use the information present in the document.
    - If a field is missing or unclear, leave it blank ("").
    - Avoid inventing any values.
    - Return a **JSON dictionary** only, keys as above, values as strings or empty.
    
    OCR Text:
    ---
    {raw_text}
    """
    
    try:
        model = genai.GenerativeModel(GEMINI_MODEL)
        response = model.generate_content(prompt)
        
        # Clean up Gemini response
        cleaned = response.text.strip()
        if cleaned.startswith("```"):
            parts = cleaned.split("```")
            if len(parts) >= 2:
                cleaned = parts[1]
        if cleaned.lower().startswith("json"):
            cleaned = cleaned[4:]
        cleaned = cleaned.strip("` \n")
        
        # Parse JSON
        extracted = json.loads(cleaned)
        return extracted
    except Exception as e:
        print(f"Gemini extraction failed: {e}")
        return {}

def build_full_address(extracted: dict) -> str:
    """Build full address from extracted components"""
    parts = [
        extracted.get("address", ""),
        extracted.get("village", ""),
        extracted.get("gram_panchayat", ""),
        extracted.get("tehsil_taluka", ""),
        extracted.get("district", ""),
        extracted.get("state", "")
    ]
    full_address = ", ".join([p.strip().strip(".") for p in parts if p and p.strip()])
    return full_address

# ----------------- API Routes -----------------
@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "message": "FRA OCR API is running (Mock Mode)"})

@app.route('/api/upload-document', methods=['POST'])
def upload_document():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        # Read file content
        file_content = file.read()
        filename = file.filename
        
        # Process based on file type (using mock OCR for now)
        if filename.lower().endswith('.pdf'):
            raw_text, confidence = mock_ocr_pdf_bytes(file_content)
        else:
            # Handle image files
            image = Image.open(io.BytesIO(file_content)).convert("RGB")
            raw_text, confidence = mock_ocr_image(image)
        
        if not raw_text.strip():
            return jsonify({"error": "No text could be extracted from the document"}), 400
        
        # Extract structured data using Gemini
        extracted_data = human_like_extract_with_gemini(raw_text)
        
        # Build full address
        full_address = build_full_address(extracted_data)
        
        # Prepare response
        response_data = {
            "filename": filename,
            "raw_text": raw_text,
            "confidence": confidence,
            "extracted_data": extracted_data,
            "full_address": full_address,
            "processing_time": datetime.now().isoformat()
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({"error": f"Processing failed: {str(e)}"}), 500

@app.route('/api/save-claim', methods=['POST'])
def save_claim():
    try:
        data = request.get_json()
        
        # Prepare record for database
        record = {
            "source_filename": data.get("filename", ""),
            "claimant_name": data.get("claimant_name", ""),
            "spouse_name": data.get("spouse_name", ""),
            "father_or_mother_name": data.get("father_or_mother_name", ""),
            "address": data.get("full_address", ""),
            "village": data.get("village", ""),
            "gram_panchayat": data.get("gram_panchayat", ""),
            "tehsil_taluka": data.get("tehsil_taluka", ""),
            "district": data.get("district", ""),
            "state": data.get("state", ""),
            "is_scheduled_tribe": data.get("is_scheduled_tribe", ""),
            "is_otfd": data.get("is_otfd", ""),
            "land_area": data.get("land_area", ""),
            "raw_text": data.get("raw_text", ""),
            "ocr_confidence": data.get("confidence", 0.0),
            "status": "pending_review"
        }
        
        # Save to database
        save_to_db(record)
        
        return jsonify({"message": "Claim saved successfully", "status": "success"})
        
    except Exception as e:
        return jsonify({"error": f"Failed to save claim: {str(e)}"}), 500

@app.route('/api/claims', methods=['GET'])
def get_claims_api():
    try:
        claims = get_claims()
        return jsonify({"claims": claims, "count": len(claims)})
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claims: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>', methods=['GET'])
def get_claim_details(claim_id):
    try:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("SELECT * FROM fra_claim_individual WHERE id = ?", (claim_id,))
        row = cur.fetchone()
        conn.close()
        
        if not row:
            return jsonify({"error": "Claim not found"}), 404
        
        # Convert to dict
        columns = [description[0] for description in cur.description]
        claim_data = dict(zip(columns, row))
        
        return jsonify(claim_data)
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claim: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>/status', methods=['PUT'])
def update_claim_status(claim_id):
    try:
        data = request.get_json()
        new_status = data.get('status')
        
        if not new_status:
            return jsonify({"error": "Status is required"}), 400
        
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("UPDATE fra_claim_individual SET status = ? WHERE id = ?", (new_status, claim_id))
        conn.commit()
        conn.close()
        
        return jsonify({"message": "Status updated successfully"})
    except Exception as e:
        return jsonify({"error": f"Failed to update status: {str(e)}"}), 500

if __name__ == '__main__':
    init_db()
    print("üöÄ Starting FRA OCR API (Mock Mode)...")
    print("üì° API will be available at: http://localhost:5001")
    print("üõë Press Ctrl+C to stop the server")
    print("‚ÑπÔ∏è  Note: Using mock OCR data for demonstration")
    app.run(debug=True, host='0.0.0.0', port=5001)



================================================
FILE: OCR/ocr_app.py
================================================
import streamlit as st
import pytesseract
from PIL import Image
import os
import re

# ‚úÖ Point pytesseract directly to the exe
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# ‚úÖ Force tessdata path manually (bypasses broken env variable)
os.environ["TESSDATA_PREFIX"] = r"C:\Program Files\Tesseract-OCR\tessdata"

# Streamlit App
st.title("üìÑ OCR Name Extractor")
st.write("Upload an image and extract the **name** from it.")

# File uploader
uploaded_file = st.file_uploader("Choose an image file", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Open image
    image = Image.open(uploaded_file)

    # Show the image
    st.image(image, caption="Uploaded Image", use_container_width=True)

    # Extract text
    with st.spinner("Extracting text..."):
        extracted_text = pytesseract.image_to_string(image, lang="eng")

    # Try to extract "name" using regex / keywords
    name = None

    # Example 1: Look for line containing "Name:"
    match = re.search(r"(?:Name[:\-]?\s*)([A-Za-z\s]+)", extracted_text, re.IGNORECASE)
    if match:
        name = match.group(1).strip()

    # Example 2: If no "Name:" found, take the first 2‚Äì3 words of OCR text
    if not name:
        words = extracted_text.strip().split()
        if len(words) > 1:
            name = " ".join(words[:3])  # first 3 words

    # Show results
    st.subheader("Extracted Name:")
    if name:
        st.success(name)
    else:
        st.warning("No name could be detected in the text.")

    # Debug: Show full OCR text too (optional)
    with st.expander("Full OCR Text"):
        st.text(extracted_text)



================================================
FILE: OCR/real_ocr_api.py
================================================
# real_ocr_api.py
import os
import json
import sqlite3
from datetime import datetime
from typing import Dict, Optional
import base64
import io
import sys
import subprocess

# Fix numpy import issue by removing current directory from path
current_dir = os.getcwd()
if current_dir in sys.path:
    sys.path.remove(current_dir)

from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import google.generativeai as genai

# ----------------- CONFIG -----------------
DB_FILE = "fra_claims.db"

# ----------------- Gemini API -----------------
genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
GEMINI_MODEL = "gemini-2.0-flash"

app = Flask(__name__)
CORS(app)

# ----------------- Database Functions -----------------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fra_claim_individual (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            source_filename TEXT,
            claimant_name TEXT,
            spouse_name TEXT,
            father_or_mother_name TEXT,
            address TEXT,
            village TEXT,
            gram_panchayat TEXT,
            tehsil_taluka TEXT,
            district TEXT,
            state TEXT,
            is_scheduled_tribe TEXT,
            is_otfd TEXT,
            land_area TEXT,
            raw_text TEXT,
            ocr_confidence REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'pending_review'
        )
    """)
    conn.commit()
    conn.close()

def save_to_db(record: Dict):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    keys = list(record.keys())
    placeholders = ", ".join(["?"] * len(keys))
    cols = ", ".join(keys)
    values = [record[k] for k in keys]
    sql = f"INSERT INTO fra_claim_individual ({cols}) VALUES ({placeholders})"
    cur.execute(sql, values)
    conn.commit()
    conn.close()

def get_claims():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        SELECT id, source_filename, claimant_name, village, district, 
               land_area, status, created_at 
        FROM fra_claim_individual 
        ORDER BY created_at DESC
    """)
    rows = cur.fetchall()
    conn.close()
    
    # Convert to list of dictionaries
    claims = []
    for row in rows:
        claims.append({
            'id': row[0],
            'source_filename': row[1],
            'claimant_name': row[2],
            'village': row[3],
            'district': row[4],
            'land_area': row[5],
            'status': row[6],
            'created_at': row[7]
        })
    return claims

# ----------------- Real OCR Functions -----------------
def run_tesseract_ocr(image_path: str) -> tuple[str, float]:
    """Run Tesseract OCR using subprocess to avoid numpy issues"""
    try:
        # Use subprocess to run tesseract directly
        result = subprocess.run([
            'tesseract', image_path, 'stdout', '-l', 'eng'
        ], capture_output=True, text=True, timeout=30, encoding='utf-8', errors='ignore')
        
        if result.returncode == 0:
            text = result.stdout.strip()
            # Calculate a mock confidence score based on text length and content
            confidence = min(95.0, max(60.0, len(text) * 0.5 + 50))
            return text, confidence
        else:
            print(f"Tesseract error: {result.stderr}")
            return "", 0.0
            
    except subprocess.TimeoutExpired:
        print("Tesseract timeout")
        return "", 0.0
    except FileNotFoundError:
        print("Tesseract not found in PATH")
        return "", 0.0
    except Exception as e:
        print(f"OCR error: {e}")
        return "", 0.0

def ocr_image(image: Image.Image) -> tuple[str, float]:
    """Extract text from PIL Image using Tesseract"""
    try:
        # Save image to temporary file
        temp_path = "/tmp/temp_ocr_image.png"
        image.save(temp_path)
        
        # Run OCR
        text, confidence = run_tesseract_ocr(temp_path)
        
        # Clean up temp file
        if os.path.exists(temp_path):
            os.remove(temp_path)
            
        return text, confidence
        
    except Exception as e:
        print(f"Image OCR failed: {e}")
        return "", 0.0

def ocr_pdf_bytes(pdf_bytes: bytes) -> tuple[str, float]:
    """Extract text from PDF using pdf2image + Tesseract"""
    try:
        # Use pdf2image to convert PDF to images
        from pdf2image import convert_from_bytes
        
        images = convert_from_bytes(pdf_bytes, dpi=300)
        all_texts = []
        all_confidences = []
        
        for i, img in enumerate(images):
            # Save each page as temp image
            temp_path = f"/tmp/temp_pdf_page_{i}.png"
            img.save(temp_path)
            
            # Run OCR on each page
            text, confidence = run_tesseract_ocr(temp_path)
            all_texts.append(text)
            all_confidences.append(confidence)
            
            # Clean up
            if os.path.exists(temp_path):
                os.remove(temp_path)
        
        combined_text = "\n".join(all_texts)
        avg_confidence = sum(all_confidences) / len(all_confidences) if all_confidences else 0
        
        return combined_text, avg_confidence
        
    except Exception as e:
        print(f"PDF OCR failed: {e}")
        return "", 0.0

def human_like_extract_with_gemini(raw_text: str) -> Dict[str, Optional[str]]:
    """Use Gemini to extract structured fields from OCR text"""
    prompt = f"""
    You are an expert in interpreting FRA Claim Forms (Form A). 
    
    Task:
    - Analyze the OCR text below carefully.
    - Extract all the following fields: 
      claimant_name, spouse_name, father_or_mother_name, address, village, gram_panchayat,
      tehsil_taluka, district, state, is_scheduled_tribe, is_otfd, land_area.
    
    - Only use the information present in the document.
    - If a field is missing or unclear, leave it blank ("").
    - Avoid inventing any values.
    - Be very careful with names and addresses - extract exactly as written.
    - Return a **JSON dictionary** only, keys as above, values as strings or empty.
    
    OCR Text:
    ---
    {raw_text}
    """
    
    try:
        model = genai.GenerativeModel(GEMINI_MODEL)
        response = model.generate_content(prompt)
        
        # Clean up Gemini response
        cleaned = response.text.strip()
        if cleaned.startswith("```"):
            parts = cleaned.split("```")
            if len(parts) >= 2:
                cleaned = parts[1]
        if cleaned.lower().startswith("json"):
            cleaned = cleaned[4:]
        cleaned = cleaned.strip("` \n")
        
        # Parse JSON
        extracted = json.loads(cleaned)
        return extracted
    except Exception as e:
        print(f"Gemini extraction failed: {e}")
        return {}

def build_full_address(extracted: dict) -> str:
    """Build full address from extracted components"""
    parts = [
        extracted.get("address", ""),
        extracted.get("village", ""),
        extracted.get("gram_panchayat", ""),
        extracted.get("tehsil_taluka", ""),
        extracted.get("district", ""),
        extracted.get("state", "")
    ]
    full_address = ", ".join([p.strip().strip(".") for p in parts if p and p.strip()])
    return full_address

# ----------------- API Routes -----------------
@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "message": "FRA OCR API is running (Real OCR Mode)"})

@app.route('/api/upload-document', methods=['POST'])
def upload_document():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        # Read file content
        file_content = file.read()
        filename = file.filename
        
        print(f"Processing file: {filename}")
        
        # Process based on file type
        if filename.lower().endswith('.pdf'):
            print("Processing PDF...")
            raw_text, confidence = ocr_pdf_bytes(file_content)
        else:
            # Handle image files
            print("Processing image...")
            image = Image.open(io.BytesIO(file_content)).convert("RGB")
            raw_text, confidence = ocr_image(image)
        
        print(f"OCR completed. Text length: {len(raw_text)}, Confidence: {confidence}")
        
        if not raw_text.strip():
            return jsonify({"error": "No text could be extracted from the document"}), 400
        
        # Extract structured data using Gemini
        print("Extracting structured data with Gemini...")
        extracted_data = human_like_extract_with_gemini(raw_text)
        print(f"Extracted {len(extracted_data)} fields")
        
        # Build full address
        full_address = build_full_address(extracted_data)
        
        # Prepare response
        response_data = {
            "filename": filename,
            "raw_text": raw_text,
            "confidence": confidence,
            "extracted_data": extracted_data,
            "full_address": full_address,
            "processing_time": datetime.now().isoformat()
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        print(f"Processing error: {e}")
        return jsonify({"error": f"Processing failed: {str(e)}"}), 500

@app.route('/api/save-claim', methods=['POST'])
def save_claim():
    try:
        data = request.get_json()
        
        # Prepare record for database
        record = {
            "source_filename": data.get("filename", ""),
            "claimant_name": data.get("claimant_name", ""),
            "spouse_name": data.get("spouse_name", ""),
            "father_or_mother_name": data.get("father_or_mother_name", ""),
            "address": data.get("full_address", ""),
            "village": data.get("village", ""),
            "gram_panchayat": data.get("gram_panchayat", ""),
            "tehsil_taluka": data.get("tehsil_taluka", ""),
            "district": data.get("district", ""),
            "state": data.get("state", ""),
            "is_scheduled_tribe": data.get("is_scheduled_tribe", ""),
            "is_otfd": data.get("is_otfd", ""),
            "land_area": data.get("land_area", ""),
            "raw_text": data.get("raw_text", ""),
            "ocr_confidence": data.get("confidence", 0.0),
            "status": "pending_review"
        }
        
        # Save to database
        save_to_db(record)
        
        return jsonify({"message": "Claim saved successfully", "status": "success"})
        
    except Exception as e:
        return jsonify({"error": f"Failed to save claim: {str(e)}"}), 500

@app.route('/api/claims', methods=['GET'])
def get_claims_api():
    try:
        claims = get_claims()
        return jsonify({"claims": claims, "count": len(claims)})
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claims: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>', methods=['GET'])
def get_claim_details(claim_id):
    try:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("SELECT * FROM fra_claim_individual WHERE id = ?", (claim_id,))
        row = cur.fetchone()
        conn.close()
        
        if not row:
            return jsonify({"error": "Claim not found"}), 404
        
        # Convert to dict
        columns = [description[0] for description in cur.description]
        claim_data = dict(zip(columns, row))
        
        return jsonify(claim_data)
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claim: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>/status', methods=['PUT'])
def update_claim_status(claim_id):
    try:
        data = request.get_json()
        new_status = data.get('status')
        
        if not new_status:
            return jsonify({"error": "Status is required"}), 400
        
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("UPDATE fra_claim_individual SET status = ? WHERE id = ?", (new_status, claim_id))
        conn.commit()
        conn.close()
        
        return jsonify({"message": "Status updated successfully"})
    except Exception as e:
        return jsonify({"error": f"Failed to update status: {str(e)}"}), 500

if __name__ == '__main__':
    init_db()
    print("üöÄ Starting FRA OCR API (Real OCR Mode)...")
    print("üì° API will be available at: http://localhost:5001")
    print("üõë Press Ctrl+C to stop the server")
    print("‚ÑπÔ∏è  Note: Using real Tesseract OCR + Gemini AI")
    app.run(debug=True, host='0.0.0.0', port=5001)



================================================
FILE: OCR/requirements.txt
================================================
Flask==2.3.3
Flask-CORS==4.0.0
pytesseract==0.3.10
Pillow==10.0.1
pdf2image==1.16.3
google-generativeai==0.3.2
pandas==2.1.1
python-dotenv==1.0.0



================================================
FILE: OCR/simple_extraction_api.py
================================================
#!/usr/bin/env python3
"""
Simple extraction API without numpy dependencies
"""

import os
import sys
import json
import re
from datetime import datetime
from typing import Dict, Optional
import base64
import io

# Fix numpy import issue
current_dir = os.getcwd()
if current_dir in sys.path:
    sys.path.remove(current_dir)

# Change to safe directory
os.chdir('/tmp')

from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image

app = Flask(__name__)
CORS(app)

def fallback_extract_with_regex(raw_text: str) -> Dict[str, Optional[str]]:
    """Fallback extraction using regex patterns for common FRA form fields"""
    extracted = {
        "claimant_name": "", "spouse_name": "", "father_or_mother_name": "", 
        "address": "", "village": "", "gram_panchayat": "", "tehsil_taluka": "", 
        "district": "", "state": "", "is_scheduled_tribe": "", "is_otfd": "", "land_area": ""
    }
    
    try:
        print(f"Fallback extraction starting with text: {raw_text[:200]}...")
        
        # Extract claimant name - look for patterns like "Name of the claimant" or "Claimant:"
        claimant_patterns = [
            r'Name of the claimant[^:]*:\s*([A-Za-z0-9\s]+?)(?=\n|Name of the spouse)',
            r'Name of the claimant[^:]*:\s*([A-Za-z0-9\s]+)',
            r'Claimant[:\s]*([A-Za-z\s]+)',
        ]
        
        for pattern in claimant_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found claimant match: '{name}'")
                if len(name) > 2 and not any(word in name.lower() for word in ['form', 'claim', 'rights', 'forest']):
                    extracted["claimant_name"] = name
                    break
        
        # Extract spouse name
        spouse_patterns = [
            r'Name of the spouse[:\s]*([A-Za-z0-9\s]+?)(?=\n|Name of father|Name of mother|$)',
            r'Name of the spouse[:\s]*([A-Za-z0-9\s]+)',
            r'Spouse[:\s]*([A-Za-z0-9\s]+)',
        ]
        
        for pattern in spouse_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found spouse match: '{name}'")
                if len(name) > 2:
                    extracted["spouse_name"] = name
                    break
        
        # Extract father/mother name
        parent_patterns = [
            r'Name of father[:\s]*([A-Za-z\s]+?)(?=\n|Address|$)',
            r'Name of mother[:\s]*([A-Za-z\s]+?)(?=\n|Address|$)',
            r'Name of father[:\s]*([A-Za-z\s]+)',
            r'Name of mother[:\s]*([A-Za-z\s]+)',
            r'Father[:\s]*([A-Za-z\s]+)',
            r'Mother[:\s]*([A-Za-z\s]+)',
        ]
        
        for pattern in parent_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found parent match: '{name}'")
                if len(name) > 2:
                    extracted["father_or_mother_name"] = name
                    break
        
        # Extract village
        village_patterns = [
            r'Village[:\s]*([A-Za-z0-9\s,]+?)(?=\n|Gram Panchayat|Tehsil|District|$)',
            r'Village[:\s]*([A-Za-z0-9\s,]+)',
        ]
        
        for pattern in village_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                village = match.group(1).strip().rstrip(',').strip()
                print(f"Found village match: '{village}'")
                if len(village) > 2:
                    extracted["village"] = village
                    break
        
        # Extract district
        district_patterns = [
            r'District[:\s]*([A-Za-z0-9\s]+?)(?=\n|$)',
            r'District[:\s]*([A-Za-z0-9\s,]+)',
        ]
        
        for pattern in district_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                district = match.group(1).strip().rstrip(',').strip()
                print(f"Found district match: '{district}'")
                if len(district) > 2:
                    extracted["district"] = district
                    break
        
        # Extract address
        address_patterns = [
            r'Address[:\s]*([A-Za-z0-9\s,.-]+?)(?=Village|District|$)',
            r'Address[:\s]*([A-Za-z0-9\s,.-]+)',
        ]
        
        for pattern in address_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE | re.DOTALL)
            if match:
                address = match.group(1).strip()
                print(f"Found address match: '{address}'")
                if len(address) > 5:
                    extracted["address"] = address
                    break
        
        # Extract land area
        area_patterns = [
            r'(\d+\.?\d*)\s*(hectares?|acres?|ha|ac)',
            r'Area[:\s]*(\d+\.?\d*)\s*(hectares?|acres?|ha|ac)',
            r'(\d+\.?\d*)\s*(hectares?|acres?)',
        ]
        
        for pattern in area_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                area = f"{match.group(1)} {match.group(2)}"
                extracted["land_area"] = area
                break
        
        # Extract Scheduled Tribe status
        st_patterns = [
            r'Scheduled Tribe[:\s]*(Yes|No)',
            r'ST[:\s]*(Yes|No)',
        ]
        
        for pattern in st_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                extracted["is_scheduled_tribe"] = match.group(1).strip()
                break
        
        # Extract OTFD status
        otfd_patterns = [
            r'Other Traditional Forest Dweller[:\s]*(Yes|No)',
            r'OTFD[:\s]*(Yes|No)',
        ]
        
        for pattern in otfd_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                extracted["is_otfd"] = match.group(1).strip()
                break
        
        print(f"Final extraction result: {extracted}")
        return extracted
        
    except Exception as e:
        print(f"Fallback extraction failed: {e}")
        return extracted

def build_full_address(extracted: dict) -> str:
    """Build full address from extracted components"""
    parts = [
        extracted.get("address", ""),
        extracted.get("village", ""),
        extracted.get("gram_panchayat", ""),
        extracted.get("tehsil_taluka", ""),
        extracted.get("district", ""),
        extracted.get("state", "")
    ]
    full_address = ", ".join([p.strip().strip(".") for p in parts if p and p.strip()])
    return full_address

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "message": "Simple Extraction API is running"})

@app.route('/api/save-claim', methods=['POST'])
def save_claim():
    try:
        data = request.get_json()
        
        # For now, just return success - in a real implementation, you would save to database
        print(f"Received claim data: {data}")
        
        return jsonify({
            "message": "Claim saved successfully",
            "claim_id": "FRA_NEW_" + str(int(datetime.now().timestamp())),
            "status": "saved"
        })
        
    except Exception as e:
        return jsonify({"error": f"Failed to save claim: {str(e)}"}), 500

@app.route('/api/upload-document', methods=['POST'])
def upload_document():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        # For now, we'll use a mock OCR result since we can't use pytesseract
        # In a real implementation, you would use OCR here
        mock_raw_text = """(Becoprion of Fores Fight) Rae, 2008

ANNEXURE -I
[See rule 6()]
FORM-A
CLAIM FORM FOR RIGHTS TO FOREST LAND
[See rule 11(1)(a)]

'Name of the claimant 6): KBPCOES
'Name of the spouse KBPCOES1
'Name of father/ mother KBPCOES2
Adaress: SADAR BAZAR
Village: SATARA,
Gram Panchayat: SATARAL
'Tehsil! Taluka: SATARAD
District SATARA
@) Scheduled Tribe: Yes/No
(Attach authenticated copy of Certificate)
(¬© Other Traditional Forest Dweller: Yes/No"""
        
        # Extract structured data using fallback extraction
        print(f"Starting extraction for text: {mock_raw_text[:200]}...")
        extracted_data = fallback_extract_with_regex(mock_raw_text)
        print(f"Extraction result: {extracted_data}")
        
        # Build full address
        full_address = build_full_address(extracted_data)
        
        # Prepare response
        response_data = {
            "filename": file.filename,
            "raw_text": mock_raw_text,
            "confidence": 95.0,
            "extracted_data": extracted_data,
            "full_address": full_address,
            "processing_time": datetime.now().isoformat()
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({"error": f"Processing failed: {str(e)}"}), 500

if __name__ == '__main__':
    print("Starting Simple Extraction API...")
    app.run(debug=True, host='0.0.0.0', port=5002)



================================================
FILE: OCR/simple_ocr_api.py
================================================
# simple_ocr_api.py
import os
import json
import sqlite3
from datetime import datetime
from typing import Dict, Optional
import base64
import io
import sys

# Fix numpy import issue by removing current directory from path
current_dir = os.getcwd()
if current_dir in sys.path:
    sys.path.remove(current_dir)

from flask import Flask, request, jsonify
from flask_cors import CORS
import pytesseract
from PIL import Image
from pdf2image import convert_from_bytes
import google.generativeai as genai

# ----------------- CONFIG -----------------
# Configure Tesseract path for different OS
if os.name == 'nt':  # Windows
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    os.environ["TESSDATA_PREFIX"] = r"C:\Program Files\Tesseract-OCR\tessdata"
else:  # Linux/Mac
    # Default paths for Linux/Mac
    pass

DB_FILE = "fra_claims.db"
POPPLER_PATH = None

# ----------------- Gemini API -----------------
genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
GEMINI_MODEL = "gemini-2.0-flash"

app = Flask(__name__)
CORS(app)

# ----------------- Database Functions -----------------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fra_claim_individual (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            source_filename TEXT,
            claimant_name TEXT,
            spouse_name TEXT,
            father_or_mother_name TEXT,
            address TEXT,
            village TEXT,
            gram_panchayat TEXT,
            tehsil_taluka TEXT,
            district TEXT,
            state TEXT,
            is_scheduled_tribe TEXT,
            is_otfd TEXT,
            land_area TEXT,
            raw_text TEXT,
            ocr_confidence REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'pending_review'
        )
    """)
    conn.commit()
    conn.close()

def save_to_db(record: Dict):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    keys = list(record.keys())
    placeholders = ", ".join(["?"] * len(keys))
    cols = ", ".join(keys)
    values = [record[k] for k in keys]
    sql = f"INSERT INTO fra_claim_individual ({cols}) VALUES ({placeholders})"
    cur.execute(sql, values)
    conn.commit()
    conn.close()

def get_claims():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        SELECT id, source_filename, claimant_name, village, district, 
               land_area, status, created_at 
        FROM fra_claim_individual 
        ORDER BY created_at DESC
    """)
    rows = cur.fetchall()
    conn.close()
    
    # Convert to list of dictionaries
    claims = []
    for row in rows:
        claims.append({
            'id': row[0],
            'source_filename': row[1],
            'claimant_name': row[2],
            'village': row[3],
            'district': row[4],
            'land_area': row[5],
            'status': row[6],
            'created_at': row[7]
        })
    return claims

# ----------------- OCR Functions -----------------
def ocr_image(image: Image.Image) -> tuple[str, float]:
    """Extract text from image and return text with confidence score"""
    try:
        # Get OCR data with confidence scores
        data = pytesseract.image_to_data(image, output_type=pytesseract.Output.DICT)
        text = pytesseract.image_to_string(image, lang="eng")
        
        # Calculate average confidence
        confidences = [int(conf) for conf in data['conf'] if int(conf) > 0]
        avg_confidence = sum(confidences) / len(confidences) if confidences else 0
        
        return text, avg_confidence
    except Exception as e:
        print(f"OCR failed: {e}")
        return "", 0.0

def ocr_pdf_bytes(pdf_bytes: bytes) -> tuple[str, float]:
    """Extract text from PDF and return text with confidence score"""
    try:
        images = convert_from_bytes(pdf_bytes, dpi=300, poppler_path=POPPLER_PATH)
        all_texts = []
        all_confidences = []
        
        for img in images:
            text, confidence = ocr_image(img)
            all_texts.append(text)
            all_confidences.append(confidence)
        
        combined_text = "\n".join(all_texts)
        avg_confidence = sum(all_confidences) / len(all_confidences) if all_confidences else 0
        
        return combined_text, avg_confidence
    except Exception as e:
        print(f"PDF OCR failed: {e}")
        return "", 0.0

def human_like_extract_with_gemini(raw_text: str) -> Dict[str, Optional[str]]:
    """Use Gemini to extract structured fields from OCR text"""
    prompt = f"""
    You are an expert in interpreting FRA Claim Forms (Form A). 
    
    Task:
    - Analyze the OCR text below.
    - Extract all the following fields: 
      claimant_name, spouse_name, father_or_mother_name, address, village, gram_panchayat,
      tehsil_taluka, district, state, is_scheduled_tribe, is_otfd, land_area.
    
    - Only use the information present in the document.
    - If a field is missing or unclear, leave it blank ("").
    - Avoid inventing any values.
    - Return a **JSON dictionary** only, keys as above, values as strings or empty.
    
    OCR Text:
    ---
    {raw_text}
    """
    
    try:
        model = genai.GenerativeModel(GEMINI_MODEL)
        response = model.generate_content(prompt)
        
        # Clean up Gemini response
        cleaned = response.text.strip()
        if cleaned.startswith("```"):
            parts = cleaned.split("```")
            if len(parts) >= 2:
                cleaned = parts[1]
        if cleaned.lower().startswith("json"):
            cleaned = cleaned[4:]
        cleaned = cleaned.strip("` \n")
        
        # Parse JSON
        extracted = json.loads(cleaned)
        return extracted
    except Exception as e:
        print(f"Gemini extraction failed: {e}")
        return {}

def build_full_address(extracted: dict) -> str:
    """Build full address from extracted components"""
    parts = [
        extracted.get("address", ""),
        extracted.get("village", ""),
        extracted.get("gram_panchayat", ""),
        extracted.get("tehsil_taluka", ""),
        extracted.get("district", ""),
        extracted.get("state", "")
    ]
    full_address = ", ".join([p.strip().strip(".") for p in parts if p and p.strip()])
    return full_address

# ----------------- API Routes -----------------
@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "message": "FRA OCR API is running"})

@app.route('/api/upload-document', methods=['POST'])
def upload_document():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        # Read file content
        file_content = file.read()
        filename = file.filename
        
        # Process based on file type
        if filename.lower().endswith('.pdf'):
            raw_text, confidence = ocr_pdf_bytes(file_content)
        else:
            # Handle image files
            image = Image.open(io.BytesIO(file_content)).convert("RGB")
            raw_text, confidence = ocr_image(image)
        
        if not raw_text.strip():
            return jsonify({"error": "No text could be extracted from the document"}), 400
        
        # Extract structured data using Gemini
        extracted_data = human_like_extract_with_gemini(raw_text)
        
        # Build full address
        full_address = build_full_address(extracted_data)
        
        # Prepare response
        response_data = {
            "filename": filename,
            "raw_text": raw_text,
            "confidence": confidence,
            "extracted_data": extracted_data,
            "full_address": full_address,
            "processing_time": datetime.now().isoformat()
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({"error": f"Processing failed: {str(e)}"}), 500

@app.route('/api/save-claim', methods=['POST'])
def save_claim():
    try:
        data = request.get_json()
        
        # Prepare record for database
        record = {
            "source_filename": data.get("filename", ""),
            "claimant_name": data.get("claimant_name", ""),
            "spouse_name": data.get("spouse_name", ""),
            "father_or_mother_name": data.get("father_or_mother_name", ""),
            "address": data.get("full_address", ""),
            "village": data.get("village", ""),
            "gram_panchayat": data.get("gram_panchayat", ""),
            "tehsil_taluka": data.get("tehsil_taluka", ""),
            "district": data.get("district", ""),
            "state": data.get("state", ""),
            "is_scheduled_tribe": data.get("is_scheduled_tribe", ""),
            "is_otfd": data.get("is_otfd", ""),
            "land_area": data.get("land_area", ""),
            "raw_text": data.get("raw_text", ""),
            "ocr_confidence": data.get("confidence", 0.0),
            "status": "pending_review"
        }
        
        # Save to database
        save_to_db(record)
        
        return jsonify({"message": "Claim saved successfully", "status": "success"})
        
    except Exception as e:
        return jsonify({"error": f"Failed to save claim: {str(e)}"}), 500

@app.route('/api/claims', methods=['GET'])
def get_claims_api():
    try:
        claims = get_claims()
        return jsonify({"claims": claims, "count": len(claims)})
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claims: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>', methods=['GET'])
def get_claim_details(claim_id):
    try:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("SELECT * FROM fra_claim_individual WHERE id = ?", (claim_id,))
        row = cur.fetchone()
        conn.close()
        
        if not row:
            return jsonify({"error": "Claim not found"}), 404
        
        # Convert to dict
        columns = [description[0] for description in cur.description]
        claim_data = dict(zip(columns, row))
        
        return jsonify(claim_data)
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claim: {str(e)}"}), 500

@app.route('/api/claim/<int:claim_id>/status', methods=['PUT'])
def update_claim_status(claim_id):
    try:
        data = request.get_json()
        new_status = data.get('status')
        
        if not new_status:
            return jsonify({"error": "Status is required"}), 400
        
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("UPDATE fra_claim_individual SET status = ? WHERE id = ?", (new_status, claim_id))
        conn.commit()
        conn.close()
        
        return jsonify({"message": "Status updated successfully"})
    except Exception as e:
        return jsonify({"error": f"Failed to update status: {str(e)}"}), 500

if __name__ == '__main__':
    init_db()
    print("üöÄ Starting FRA OCR API...")
    print("üì° API will be available at: http://localhost:5000")
    print("üõë Press Ctrl+C to stop the server")
    app.run(debug=True, host='0.0.0.0', port=5000)



================================================
FILE: OCR/simple_real_ocr.py
================================================
# simple_real_ocr.py
import os
import json
import sqlite3
from datetime import datetime
import subprocess
import tempfile

from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import google.generativeai as genai

# ----------------- CONFIG -----------------
DB_FILE = "fra_claims.db"

# ----------------- Gemini API -----------------
genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
GEMINI_MODEL = "gemini-2.0-flash"

app = Flask(__name__)
CORS(app)

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fra_claim_individual (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            source_filename TEXT,
            claimant_name TEXT,
            spouse_name TEXT,
            father_or_mother_name TEXT,
            address TEXT,
            village TEXT,
            gram_panchayat TEXT,
            tehsil_taluka TEXT,
            district TEXT,
            state TEXT,
            is_scheduled_tribe TEXT,
            is_otfd TEXT,
            land_area TEXT,
            raw_text TEXT,
            ocr_confidence REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'pending_review'
        )
    """)
    conn.commit()
    conn.close()

def run_ocr(image_path):
    """Run OCR on image file"""
    try:
        result = subprocess.run([
            'tesseract', image_path, 'stdout', '-l', 'eng'
        ], capture_output=True, text=True, timeout=30, encoding='utf-8', errors='ignore')
        
        if result.returncode == 0:
            text = result.stdout.strip()
            confidence = min(95.0, max(60.0, len(text) * 0.5 + 50))
            return text, confidence
        else:
            print(f"Tesseract error: {result.stderr}")
            return "", 0.0
    except Exception as e:
        print(f"OCR error: {e}")
        return "", 0.0

def extract_with_gemini(text):
    """Extract structured data using Gemini"""
    prompt = f"""
    Extract FRA claim information from this text:
    
    {text}
    
    Return JSON with these fields:
    claimant_name, spouse_name, father_or_mother_name, address, village, 
    gram_panchayat, tehsil_taluka, district, state, is_scheduled_tribe, 
    is_otfd, land_area
    
    Only use information present in the text. Leave fields blank if not found.
    """
    
    try:
        model = genai.GenerativeModel(GEMINI_MODEL)
        response = model.generate_content(prompt)
        
        cleaned = response.text.strip()
        if cleaned.startswith("```"):
            parts = cleaned.split("```")
            if len(parts) >= 2:
                cleaned = parts[1]
        if cleaned.lower().startswith("json"):
            cleaned = cleaned[4:]
        cleaned = cleaned.strip("` \n")
        
        return json.loads(cleaned)
    except Exception as e:
        print(f"Gemini error: {e}")
        return {}

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "message": "Simple Real OCR API"})

def save_to_db(record):
    """Save claim record to database"""
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    keys = list(record.keys())
    placeholders = ", ".join(["?"] * len(keys))
    cols = ", ".join(keys)
    values = [record[k] for k in keys]
    sql = f"INSERT INTO fra_claim_individual ({cols}) VALUES ({placeholders})"
    cur.execute(sql, values)
    conn.commit()
    conn.close()

@app.route('/api/save-claim', methods=['POST'])
def save_claim():
    """Save extracted claim data to database"""
    try:
        data = request.get_json()
        
        # Prepare record for database
        record = {
            "source_filename": data.get("filename", ""),
            "claimant_name": data.get("claimant_name", ""),
            "spouse_name": data.get("spouse_name", ""),
            "father_or_mother_name": data.get("father_or_mother_name", ""),
            "address": data.get("full_address", ""),
            "village": data.get("village", ""),
            "gram_panchayat": data.get("gram_panchayat", ""),
            "tehsil_taluka": data.get("tehsil_taluka", ""),
            "district": data.get("district", ""),
            "state": data.get("state", ""),
            "is_scheduled_tribe": data.get("is_scheduled_tribe", ""),
            "is_otfd": data.get("is_otfd", ""),
            "land_area": data.get("land_area", ""),
            "raw_text": data.get("raw_text", ""),
            "ocr_confidence": data.get("confidence", 0.0),
            "status": "pending_review"
        }
        
        # Save to database
        save_to_db(record)
        
        return jsonify({"message": "Claim saved successfully", "status": "success"})
        
    except Exception as e:
        print(f"Save error: {e}")
        return jsonify({"error": f"Failed to save claim: {str(e)}"}), 500

@app.route('/api/claims', methods=['GET'])
def get_claims():
    """Get all claims from database"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("""
            SELECT id, source_filename, claimant_name, village, district, 
                   land_area, status, created_at 
            FROM fra_claim_individual 
            ORDER BY created_at DESC
        """)
        rows = cur.fetchall()
        conn.close()
        
        # Convert to list of dictionaries
        claims = []
        for row in rows:
            claims.append({
                'id': row[0],
                'source_filename': row[1],
                'claimant_name': row[2],
                'village': row[3],
                'district': row[4],
                'land_area': row[5],
                'status': row[6],
                'created_at': row[7]
            })
        
        return jsonify({"claims": claims, "count": len(claims)})
    except Exception as e:
        return jsonify({"error": f"Failed to fetch claims: {str(e)}"}), 500

@app.route('/api/claims/<int:claim_id>', methods=['DELETE'])
def delete_claim(claim_id):
    """Delete a specific claim"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        
        # Check if claim exists
        cur.execute('SELECT id FROM fra_claim_individual WHERE id = ?', (claim_id,))
        if not cur.fetchone():
            conn.close()
            return jsonify({"error": "Claim not found"}), 404
        
        # Delete the claim
        cur.execute('DELETE FROM fra_claim_individual WHERE id = ?', (claim_id,))
        conn.commit()
        conn.close()
        
        return jsonify({"success": True, "message": "Claim deleted successfully"})
        
    except Exception as e:
        return jsonify({"error": f"Failed to delete claim: {str(e)}"}), 500

@app.route('/api/upload-document', methods=['POST'])
def upload_document():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        print(f"Processing file: {file.filename}")
        
        # Read file content
        file_content = file.read()
        
        # Save to temporary file
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            temp_file.write(file_content)
            temp_path = temp_file.name
        
        try:
            # Run OCR
            print("Running OCR...")
            text, confidence = run_ocr(temp_path)
            print(f"OCR result: {len(text)} characters, confidence: {confidence}")
            
            if not text.strip():
                return jsonify({"error": "No text could be extracted"}), 400
            
            # Extract structured data
            print("Extracting with Gemini...")
            extracted = extract_with_gemini(text)
            print(f"Extracted {len(extracted)} fields")
            
            # Build address
            address_parts = [
                extracted.get("address", ""),
                extracted.get("village", ""),
                extracted.get("gram_panchayat", ""),
                extracted.get("tehsil_taluka", ""),
                extracted.get("district", ""),
                extracted.get("state", "")
            ]
            full_address = ", ".join([p.strip() for p in address_parts if p and p.strip()])
            
            response_data = {
                "filename": file.filename,
                "raw_text": text,
                "confidence": confidence,
                "extracted_data": extracted,
                "full_address": full_address,
                "processing_time": datetime.now().isoformat()
            }
            
            return jsonify(response_data)
            
        finally:
            # Clean up temp file
            if os.path.exists(temp_path):
                os.remove(temp_path)
        
    except Exception as e:
        print(f"Processing error: {e}")
        return jsonify({"error": f"Processing failed: {str(e)}"}), 500

if __name__ == '__main__':
    init_db()
    print("üöÄ Starting Simple Real OCR API...")
    print("üì° API available at: http://localhost:5001")
    app.run(debug=True, host='0.0.0.0', port=5001)



================================================
FILE: OCR/simple_test.py
================================================
#!/usr/bin/env python3
"""
Simple test of extraction patterns
"""

import re
from typing import Dict, Optional

def fallback_extract_with_regex(raw_text: str) -> Dict[str, Optional[str]]:
    """Fallback extraction using regex patterns for common FRA form fields"""
    extracted = {
        "claimant_name": "", "spouse_name": "", "father_or_mother_name": "", 
        "address": "", "village": "", "gram_panchayat": "", "tehsil_taluka": "", 
        "district": "", "state": "", "is_scheduled_tribe": "", "is_otfd": "", "land_area": ""
    }
    
    try:
        print(f"Processing text: {raw_text[:200]}...")
        
        # Extract claimant name - look for patterns like "Name of the claimant" or "Claimant:"
        claimant_patterns = [
            r'Name of the claimant[:\s]*[0-9]*\)?\s*([A-Za-z\s]+?)(?=\n|Name of the spouse|$)',
            r'Name of the claimant[:\s]*[0-9]*\)?\s*([A-Za-z\s]+)',
            r'Claimant[:\s]*([A-Za-z\s]+)',
        ]
        
        for i, pattern in enumerate(claimant_patterns):
            print(f"Trying claimant pattern {i+1}: {pattern}")
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found claimant match: '{name}'")
                if len(name) > 2 and not any(word in name.lower() for word in ['form', 'claim', 'rights', 'forest']):
                    extracted["claimant_name"] = name
                    break
        
        # Extract spouse name
        spouse_patterns = [
            r'Name of the spouse[:\s]*([A-Za-z0-9\s]+?)(?=\n|Name of father|Name of mother|$)',
            r'Name of the spouse[:\s]*([A-Za-z0-9\s]+)',
            r'Spouse[:\s]*([A-Za-z0-9\s]+)',
        ]
        
        for i, pattern in enumerate(spouse_patterns):
            print(f"Trying spouse pattern {i+1}: {pattern}")
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found spouse match: '{name}'")
                if len(name) > 2:
                    extracted["spouse_name"] = name
                    break
        
        # Extract father/mother name
        parent_patterns = [
            r'Name of father[:\s]*([A-Za-z\s]+?)(?=\n|Address|$)',
            r'Name of mother[:\s]*([A-Za-z\s]+?)(?=\n|Address|$)',
            r'Name of father[:\s]*([A-Za-z\s]+)',
            r'Name of mother[:\s]*([A-Za-z\s]+)',
            r'Father[:\s]*([A-Za-z\s]+)',
            r'Mother[:\s]*([A-Za-z\s]+)',
        ]
        
        for i, pattern in enumerate(parent_patterns):
            print(f"Trying parent pattern {i+1}: {pattern}")
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                print(f"Found parent match: '{name}'")
                if len(name) > 2:
                    extracted["father_or_mother_name"] = name
                    break
        
        # Extract village
        village_patterns = [
            r'Village[:\s]*([A-Za-z0-9\s,]+?)(?=\n|Gram Panchayat|Tehsil|District|$)',
            r'Village[:\s]*([A-Za-z0-9\s,]+)',
        ]
        
        for i, pattern in enumerate(village_patterns):
            print(f"Trying village pattern {i+1}: {pattern}")
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                village = match.group(1).strip().rstrip(',').strip()
                print(f"Found village match: '{village}'")
                if len(village) > 2:
                    extracted["village"] = village
                    break
        
        # Extract district
        district_patterns = [
            r'District[:\s]*([A-Za-z0-9\s]+?)(?=\n|$)',
            r'District[:\s]*([A-Za-z0-9\s,]+)',
        ]
        
        for i, pattern in enumerate(district_patterns):
            print(f"Trying district pattern {i+1}: {pattern}")
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                district = match.group(1).strip().rstrip(',').strip()
                print(f"Found district match: '{district}'")
                if len(district) > 2:
                    extracted["district"] = district
                    break
        
        # Extract address
        address_patterns = [
            r'Address[:\s]*([A-Za-z0-9\s,.-]+?)(?=Village|District|$)',
            r'Address[:\s]*([A-Za-z0-9\s,.-]+)',
        ]
        
        for i, pattern in enumerate(address_patterns):
            print(f"Trying address pattern {i+1}: {pattern}")
            match = re.search(pattern, raw_text, re.IGNORECASE | re.DOTALL)
            if match:
                address = match.group(1).strip()
                print(f"Found address match: '{address}'")
                if len(address) > 5:
                    extracted["address"] = address
                    break
        
        print(f"Final extraction result: {extracted}")
        return extracted
        
    except Exception as e:
        print(f"Fallback extraction failed: {e}")
        return extracted

# Test with sample text
sample_text = """(Becoprion of Fores Fight) Rae, 2008

ANNEXURE -I
[See rule 6()]
FORM-A
CLAIM FORM FOR RIGHTS TO FOREST LAND
[See rule 11(1)(a)]

'Name of the claimant 6): KBPCOES
'Name of the spouse KBPCOES1
'Name of father/ mother KBPCOES2
Adaress: SADAR BAZAR
Village: SATARA,
Gram Panchayat: SATARAL
'Tehsil! Taluka: SATARAD
District SATARA
@) Scheduled Tribe: Yes/No
(Attach authenticated copy of Certificate)
(¬© Other Traditional Forest Dweller: Yes/No"""

if __name__ == "__main__":
    result = fallback_extract_with_regex(sample_text)
    print("\n" + "="*50)
    print("EXTRACTION RESULT:")
    print("="*50)
    for key, value in result.items():
        print(f"{key}: '{value}'")



================================================
FILE: OCR/start_ocr.bat
================================================
@echo off
echo Starting FRA OCR API Server...
echo.

REM Check if Python is installed
python --version >nul 2>&1
if errorlevel 1 (
    echo Error: Python is not installed or not in PATH
    echo Please install Python 3.8 or higher
    pause
    exit /b 1
)

REM Check if we're in the right directory
if not exist "flask_ocr_api.py" (
    echo Error: Please run this script from the OCR directory
    pause
    exit /b 1
)

REM Install dependencies if requirements.txt exists
if exist "requirements.txt" (
    echo Installing Python dependencies...
    pip install -r requirements.txt
    echo.
)

REM Run the startup script
echo Starting OCR API server...
python start_ocr_api.py

pause



================================================
FILE: OCR/start_ocr.sh
================================================
#!/bin/bash

echo "Starting FRA OCR API Server..."
echo

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
    echo "Error: Python 3 is not installed"
    echo "Please install Python 3.8 or higher"
    exit 1
fi

# Check if we're in the right directory
if [ ! -f "flask_ocr_api.py" ]; then
    echo "Error: Please run this script from the OCR directory"
    exit 1
fi

# Install dependencies if requirements.txt exists
if [ -f "requirements.txt" ]; then
    echo "Installing Python dependencies..."
    pip3 install -r requirements.txt
    echo
fi

# Make the startup script executable
chmod +x start_ocr_api.py

# Run the startup script
echo "Starting OCR API server..."
python3 start_ocr_api.py



================================================
FILE: OCR/start_ocr_api.py
================================================
#!/usr/bin/env python3
"""
Startup script for FRA OCR API
This script initializes the database and starts the Flask server
"""

import os
import sys
import subprocess
import sqlite3
from pathlib import Path

def check_dependencies():
    """Check if required dependencies are installed"""
    try:
        # Check for numpy source directory issue
        import os
        import sys
        
        # Remove current directory from path to avoid numpy source directory issues
        current_dir = os.getcwd()
        if current_dir in sys.path:
            sys.path.remove(current_dir)
        
        import flask
        import pytesseract
        import PIL
        import pdf2image
        import google.generativeai
        import pandas
        import numpy
        print("‚úÖ All required dependencies are installed")
        return True
    except ImportError as e:
        print(f"‚ùå Missing dependency: {e}")
        print("Please install requirements: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå Dependency check failed: {e}")
        return False

def check_tesseract():
    """Check if Tesseract OCR is installed"""
    try:
        import pytesseract
        pytesseract.get_tesseract_version()
        print("‚úÖ Tesseract OCR is available")
        return True
    except Exception as e:
        print(f"‚ùå Tesseract OCR not found: {e}")
        print("Please install Tesseract OCR:")
        print("  Windows: Download from https://github.com/UB-Mannheim/tesseract/wiki")
        print("  macOS: brew install tesseract")
        print("  Ubuntu: sudo apt-get install tesseract-ocr")
        return False

def initialize_database():
    """Initialize the SQLite database"""
    try:
        conn = sqlite3.connect('fra_claims.db')
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS fra_claim_individual (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                source_filename TEXT,
                claimant_name TEXT,
                spouse_name TEXT,
                father_or_mother_name TEXT,
                address TEXT,
                village TEXT,
                gram_panchayat TEXT,
                tehsil_taluka TEXT,
                district TEXT,
                state TEXT,
                is_scheduled_tribe TEXT,
                is_otfd TEXT,
                land_area TEXT,
                raw_text TEXT,
                ocr_confidence REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'pending_review'
            )
        """)
        conn.commit()
        conn.close()
        print("‚úÖ Database initialized successfully")
        return True
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        return False

def main():
    """Main startup function"""
    print("üöÄ Starting FRA OCR API...")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not os.path.exists('flask_ocr_api.py'):
        print("‚ùå Please run this script from the OCR directory")
        sys.exit(1)
    
    # Check dependencies
    if not check_dependencies():
        sys.exit(1)
    
    # Check Tesseract
    if not check_tesseract():
        sys.exit(1)
    
    # Initialize database
    if not initialize_database():
        sys.exit(1)
    
    print("=" * 50)
    print("üéâ All checks passed! Starting Flask server...")
    print("üì° API will be available at: http://localhost:5000")
    print("üìö API Documentation: http://localhost:5000/api/health")
    print("üõë Press Ctrl+C to stop the server")
    print("=" * 50)
    
    # Start Flask server
    try:
        from flask_ocr_api import app
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã Server stopped by user")
    except Exception as e:
        print(f"‚ùå Server error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()



================================================
FILE: OCR/test_extraction.py
================================================
#!/usr/bin/env python3
"""
Test extraction directly
"""

import os
import sys
import json
import re
from typing import Dict, Optional

# Fix numpy import issue
current_dir = os.getcwd()
if current_dir in sys.path:
    sys.path.remove(current_dir)

# Change to safe directory
os.chdir('/tmp')

# Add OCR directory to path
sys.path.append('/Users/ashayvairat/Public/FRA/fra_atlas_webgis version 7/OCR')

def test_extraction():
    # Import the functions
    from flask_ocr_api import human_like_extract_with_gemini, fallback_extract_with_regex
    
    sample_text = """(Becoprion of Fores Fight) Rae, 2008

ANNEXURE -I
[See rule 6()]
FORM-A
CLAIM FORM FOR RIGHTS TO FOREST LAND
[See rule 11(1)(a)]

'Name of the claimant 6): KBPCOES
'Name of the spouse KBPCOES1
'Name of father/ mother KBPCOES2
Adaress: SADAR BAZAR
Village: SATARA,
Gram Panchayat: SATARAL
'Tehsil! Taluka: SATARAD
District SATARA
@) Scheduled Tribe: Yes/No
(Attach authenticated copy of Certificate)
(¬© Other Traditional Forest Dweller: Yes/No"""

    print("Testing Gemini extraction...")
    try:
        gemini_result = human_like_extract_with_gemini(sample_text)
        print(f"Gemini result: {gemini_result}")
    except Exception as e:
        print(f"Gemini failed: {e}")
    
    print("\nTesting fallback extraction...")
    try:
        fallback_result = fallback_extract_with_regex(sample_text)
        print(f"Fallback result: {fallback_result}")
    except Exception as e:
        print(f"Fallback failed: {e}")

if __name__ == "__main__":
    test_extraction()








================================================
FILE: OCR/test_minimal_api.py
================================================
#!/usr/bin/env python3
"""
Test script for the minimal OCR API
"""

import requests
import json
from PIL import Image, ImageDraw, ImageFont
import io

def create_test_image():
    """Create a test image with FRA claim text"""
    img = Image.new('RGB', (600, 400), color='white')
    draw = ImageDraw.Draw(img)
    
    try:
        font = ImageFont.load_default()
    except:
        font = None
    
    text_lines = [
        "FOREST RIGHTS ACT CLAIM FORM",
        "",
        "Claimant Name: Ramesh Kumar Gond",
        "Spouse Name: Sunita Gond",
        "Father's Name: Late Ram Singh Gond",
        "",
        "Village: Jagdalpur",
        "District: Bastar",
        "State: Chhattisgarh",
        "",
        "Land Area: 2.5 hectares",
        "Scheduled Tribe: Yes"
    ]
    
    y_position = 30
    for line in text_lines:
        draw.text((20, y_position), line, fill='black', font=font)
        y_position += 25
    
    # Save to bytes
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='PNG')
    img_bytes.seek(0)
    return img_bytes

def test_api():
    """Test the OCR API"""
    print("üß™ Testing Minimal OCR API...")
    
    # Test health endpoint
    try:
        response = requests.get("http://localhost:5001/api/health")
        if response.status_code == 200:
            print("‚úÖ Health check passed")
            print(f"   Response: {response.json()}")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Cannot connect to API. Make sure it's running on port 5000")
        return False
    
    # Test document upload
    try:
        print("\nüì§ Testing document upload...")
        img_bytes = create_test_image()
        
        files = {'file': ('test_fra_claim.png', img_bytes, 'image/png')}
        response = requests.post("http://localhost:5001/api/upload-document", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Document upload successful")
            print(f"   Confidence: {data.get('confidence', 0):.1f}%")
            print(f"   Extracted fields: {len(data.get('extracted_data', {}))}")
            
            # Show extracted data
            extracted = data.get('extracted_data', {})
            print("\nüìä Extracted Data:")
            for key, value in extracted.items():
                if value:
                    print(f"   {key}: {value}")
            
            return data
        else:
            print(f"‚ùå Upload failed: {response.status_code}")
            print(f"   Error: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Upload error: {e}")
        return None

def test_save_claim(ocr_data):
    """Test saving a claim"""
    if not ocr_data:
        print("‚ùå No OCR data to save")
        return False
    
    try:
        print("\nüíæ Testing claim save...")
        
        claim_data = {
            "filename": ocr_data.get("filename", ""),
            "claimant_name": ocr_data.get("extracted_data", {}).get("claimant_name", ""),
            "village": ocr_data.get("extracted_data", {}).get("village", ""),
            "district": ocr_data.get("extracted_data", {}).get("district", ""),
            "land_area": ocr_data.get("extracted_data", {}).get("land_area", ""),
            "is_scheduled_tribe": ocr_data.get("extracted_data", {}).get("is_scheduled_tribe", ""),
            "full_address": ocr_data.get("full_address", ""),
            "raw_text": ocr_data.get("raw_text", ""),
            "confidence": ocr_data.get("confidence", 0)
        }
        
        response = requests.post(
            "http://localhost:5001/api/save-claim",
            headers={'Content-Type': 'application/json'},
            json=claim_data
        )
        
        if response.status_code == 200:
            print("‚úÖ Claim saved successfully")
            return True
        else:
            print(f"‚ùå Save failed: {response.status_code}")
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Save error: {e}")
        return False

def test_get_claims():
    """Test retrieving claims"""
    try:
        print("\nüìã Testing claims retrieval...")
        
        response = requests.get("http://localhost:5001/api/claims")
        
        if response.status_code == 200:
            data = response.json()
            claims = data.get("claims", [])
            print(f"‚úÖ Retrieved {len(claims)} claims")
            
            for claim in claims:
                print(f"   - {claim.get('claimant_name', 'Unknown')} from {claim.get('village', 'Unknown')}")
            
            return True
        else:
            print(f"‚ùå Retrieval failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Retrieval error: {e}")
        return False

def main():
    """Main test function"""
    print("üöÄ FRA OCR API Test Suite")
    print("=" * 50)
    
    # Test API health
    if not test_api():
        print("\n‚ùå API is not running. Please start it first:")
        print("   python minimal_ocr_api.py")
        return
    
    # Test document upload
    ocr_data = test_api()
    if not ocr_data:
        return
    
    # Test saving claim
    if test_save_claim(ocr_data):
        print("\n‚úÖ All tests passed!")
        
        # Test retrieving claims
        test_get_claims()
    else:
        print("\n‚ùå Some tests failed")

if __name__ == "__main__":
    main()



================================================
FILE: OCR/test_ocr.py
================================================
#!/usr/bin/env python3
"""
Test script for FRA OCR functionality
This script tests the OCR processing without requiring the full Flask server
"""

import os
import sys
import json
from PIL import Image
import pytesseract

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_tesseract():
    """Test if Tesseract OCR is working"""
    print("üîç Testing Tesseract OCR...")
    try:
        # Create a simple test image with text
        from PIL import Image, ImageDraw, ImageFont
        
        # Create a white image
        img = Image.new('RGB', (400, 100), color='white')
        draw = ImageDraw.Draw(img)
        
        # Add text to the image
        try:
            # Try to use a default font
            font = ImageFont.load_default()
        except:
            font = None
        
        draw.text((10, 30), "FRA Claim Form Test", fill='black', font=font)
        draw.text((10, 50), "Claimant: John Doe", fill='black', font=font)
        draw.text((10, 70), "Village: Test Village", fill='black', font=font)
        
        # Save test image
        test_image_path = "test_image.png"
        img.save(test_image_path)
        print(f"‚úÖ Created test image: {test_image_path}")
        
        # Test OCR
        text = pytesseract.image_to_string(img, lang="eng")
        print(f"‚úÖ OCR extracted text: {text.strip()}")
        
        # Clean up
        os.remove(test_image_path)
        return True
        
    except Exception as e:
        print(f"‚ùå Tesseract test failed: {e}")
        return False

def test_gemini_api():
    """Test if Gemini API is working"""
    print("\nü§ñ Testing Gemini API...")
    try:
        import google.generativeai as genai
        
        # Configure API
        genai.configure(api_key="AIzaSyC7EjsWlNLMVJfLyaBkAkYkud6bo9ElQ9U")
        model = genai.GenerativeModel("gemini-2.0-flash")
        
        # Test with sample text
        test_text = """
        FRA Claim Form
        Claimant Name: Ramesh Kumar Gond
        Village: Jagdalpur
        District: Bastar
        Land Area: 2.5 hectares
        Scheduled Tribe: Yes
        """
        
        prompt = f"""
        Extract the following fields from this FRA claim text:
        claimant_name, village, district, land_area, is_scheduled_tribe
        
        Text: {test_text}
        
        Return as JSON.
        """
        
        response = model.generate_content(prompt)
        print(f"‚úÖ Gemini response: {response.text[:200]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå Gemini API test failed: {e}")
        return False

def test_database():
    """Test database functionality"""
    print("\nüíæ Testing database...")
    try:
        import sqlite3
        
        # Create test database
        conn = sqlite3.connect('test_fra_claims.db')
        cur = conn.cursor()
        
        # Create table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS test_claims (
                id INTEGER PRIMARY KEY,
                claimant_name TEXT,
                village TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Insert test data
        cur.execute("INSERT INTO test_claims (claimant_name, village) VALUES (?, ?)", 
                   ("Test Claimant", "Test Village"))
        
        # Query data
        cur.execute("SELECT * FROM test_claims")
        result = cur.fetchone()
        
        if result:
            print(f"‚úÖ Database test successful: {result}")
        
        conn.commit()
        conn.close()
        
        # Clean up
        os.remove('test_fra_claims.db')
        return True
        
    except Exception as e:
        print(f"‚ùå Database test failed: {e}")
        return False

def test_file_processing():
    """Test file processing capabilities"""
    print("\nüìÑ Testing file processing...")
    try:
        from pdf2image import convert_from_bytes
        from PIL import Image
        import io
        
        # Create a simple PDF-like test
        print("‚úÖ PDF processing libraries available")
        
        # Test image processing
        img = Image.new('RGB', (200, 100), color='white')
        print("‚úÖ Image processing working")
        
        return True
        
    except Exception as e:
        print(f"‚ùå File processing test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üß™ FRA OCR System Test Suite")
    print("=" * 50)
    
    tests = [
        ("Tesseract OCR", test_tesseract),
        ("Gemini API", test_gemini_api),
        ("Database", test_database),
        ("File Processing", test_file_processing)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} test crashed: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä Test Results Summary:")
    print("=" * 50)
    
    all_passed = True
    for test_name, passed in results:
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{test_name:20} {status}")
        if not passed:
            all_passed = False
    
    print("=" * 50)
    if all_passed:
        print("üéâ All tests passed! OCR system is ready to use.")
        print("\nTo start the OCR API server:")
        print("  python start_ocr_api.py")
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the errors above.")
        print("\nCommon fixes:")
        print("  - Install Tesseract OCR")
        print("  - Install Python dependencies: pip install -r requirements.txt")
        print("  - Check Gemini API key")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)



================================================
FILE: OCR/test_sample_document.py
================================================
#!/usr/bin/env python3
"""
Test script to debug OCR processing of the sample document
"""

import requests
import json
from PIL import Image
import io
import subprocess
import os

def test_tesseract_directly():
    """Test Tesseract directly on the sample document"""
    print("üîç Testing Tesseract directly on Sample_claim.png...")
    
    sample_path = "../Sample_claim.png"
    if not os.path.exists(sample_path):
        print(f"‚ùå Sample document not found at {sample_path}")
        return False
    
    try:
        # Test tesseract directly
        result = subprocess.run([
            'tesseract', sample_path, 'stdout', '-l', 'eng'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            text = result.stdout.strip()
            print(f"‚úÖ Tesseract extracted {len(text)} characters")
            print("üìÑ First 500 characters:")
            print("-" * 50)
            print(text[:500])
            print("-" * 50)
            return True
        else:
            print(f"‚ùå Tesseract failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_image_processing():
    """Test image processing with PIL"""
    print("\nüñºÔ∏è Testing image processing...")
    
    sample_path = "../Sample_claim.png"
    try:
        # Open and process image
        image = Image.open(sample_path)
        print(f"‚úÖ Image loaded: {image.size}, mode: {image.mode}")
        
        # Convert to RGB if needed
        if image.mode != 'RGB':
            image = image.convert('RGB')
            print("‚úÖ Converted to RGB")
        
        # Save as temporary file for tesseract
        temp_path = "/tmp/sample_claim_temp.png"
        image.save(temp_path)
        print(f"‚úÖ Saved temp image to {temp_path}")
        
        # Test tesseract on temp file
        result = subprocess.run([
            'tesseract', temp_path, 'stdout', '-l', 'eng'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            text = result.stdout.strip()
            print(f"‚úÖ OCR on processed image: {len(text)} characters")
            print("üìÑ First 300 characters:")
            print("-" * 50)
            print(text[:300])
            print("-" * 50)
            
            # Clean up
            os.remove(temp_path)
            return True
        else:
            print(f"‚ùå OCR failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Image processing error: {e}")
        return False

def test_api_upload():
    """Test uploading to the API"""
    print("\nüåê Testing API upload...")
    
    sample_path = "../Sample_claim.png"
    try:
        with open(sample_path, 'rb') as f:
            files = {'file': ('Sample_claim.png', f, 'image/png')}
            response = requests.post('http://localhost:5001/api/upload-document', files=files)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API upload successful")
            print(f"   Confidence: {data.get('confidence', 0):.1f}%")
            print(f"   Text length: {len(data.get('raw_text', ''))}")
            
            # Show extracted data
            extracted = data.get('extracted_data', {})
            if extracted:
                print("\nüìä Extracted Data:")
                for key, value in extracted.items():
                    if value:
                        print(f"   {key}: {value}")
            else:
                print("‚ùå No extracted data")
            
            return True
        else:
            print(f"‚ùå API upload failed: {response.status_code}")
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå API upload error: {e}")
        return False

def main():
    """Main test function"""
    print("üß™ Sample Document OCR Test")
    print("=" * 50)
    
    # Test 1: Direct Tesseract
    tesseract_ok = test_tesseract_directly()
    
    # Test 2: Image processing
    image_ok = test_image_processing()
    
    # Test 3: API upload
    api_ok = test_api_upload()
    
    print("\n" + "=" * 50)
    print("üìä Test Results:")
    print(f"   Tesseract Direct: {'‚úÖ' if tesseract_ok else '‚ùå'}")
    print(f"   Image Processing: {'‚úÖ' if image_ok else '‚ùå'}")
    print(f"   API Upload: {'‚úÖ' if api_ok else '‚ùå'}")
    
    if not tesseract_ok:
        print("\nüí° Suggestions:")
        print("   - Check if Tesseract is installed: brew install tesseract")
        print("   - Try different image formats (JPG, PNG)")
        print("   - Ensure image has good contrast and resolution")
        print("   - Try preprocessing the image (increase contrast, resize)")

if __name__ == "__main__":
    main()



================================================
FILE: OCR/ocr_env/pyvenv.cfg
================================================
home = /Users/ashayvairat/.pyenv/versions/3.11.7/bin
include-system-site-packages = false
version = 3.11.7
executable = /Users/ashayvairat/.pyenv/versions/3.11.7/bin/python3.11
command = /Users/ashayvairat/.pyenv/versions/3.11.7/bin/python -m venv /Users/ashayvairat/Public/FRA/fra_atlas_webgis version 6/OCR/ocr_env



================================================
FILE: pages/login.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login - TribalVision</title>
    <link rel="stylesheet" href="../css/main.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<script type="module" src="https://static.rocket.new/rocket-web.js?_cfg=https%3A%2F%2Ffraatlas6365back.builtwithrocket.new&_be=https%3A%2F%2Fapplication.rocket.new&_v=0.1.8"></script>
</head>
<body class="bg-background" style="height: 100vh;">
    <!-- Background Pattern -->
    <div class="fixed inset-0 opacity-5 pointer-events-none">
        <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                    <path d="M 40 0 L 0 0 0 40" fill="none" stroke="#1E40AF" stroke-width="1"/>
                </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#grid)"/>
        </svg>
    </div>

    <!-- Main Container -->
    <div class="relative min-h-screen flex items-center justify-center px-4 py-8">
        <!-- Login Card -->
        <div class="w-full max-w-md">
            <!-- Header Section -->
            <div class="text-center mb-8">
                <!-- Government Logo -->
                <div class="flex justify-center mb-6">
                    <div class="bg-primary-800 p-4 rounded-xl shadow-lg">
                        <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                        </svg>
                    </div>
                </div>
                
                <!-- Title -->
                <h1 class="text-3xl font-semibold text-text-primary mb-2">TribalVision</h1>
                <p class="text-text-secondary text-sm">Forest Rights Act Claims Management System</p>
                
                <!-- Trust Signals -->
                <div class="flex justify-center items-center gap-4 mt-4 text-xs text-text-secondary">
                    <div class="flex items-center gap-1">
                        <i class="fas fa-shield-alt text-secondary-600"></i>
                        <span>Government Certified</span>
                    </div>
                    <div class="flex items-center gap-1">
                        <i class="fas fa-lock text-secondary-600"></i>
                        <span>SSL Secured</span>
                    </div>
                </div>
            </div>

            <!-- Login Form -->
            <div class="floating-panel p-8">
                <form id="loginForm" class="space-y-6">
                    <!-- Role Selection -->
                    <div>
                        <label for="userRole" class="block text-sm font-medium text-text-primary mb-2">
                            <i class="fas fa-user-tag mr-2 text-primary-600"></i>
                            User Role
                        </label>
                        <select id="userRole" name="userRole" class="form-input w-full">
                            <option value="government">Government Official</option>
                            <option value="tribal">Tribal Representative</option>
                            <option value="analyst">GIS Analyst</option>
                            <option value="collector">District Collector</option>
                        </select>
                    </div>

                    <!-- Email/Username Field -->
                    <div>
                        <label for="email" class="block text-sm font-medium text-text-primary mb-2">
                            <i class="fas fa-envelope mr-2 text-primary-600"></i>
                            Email Address
                        </label>
                        <input type="email" id="email" name="email" class="form-input w-full" placeholder="Enter your email address" required />
                        <div id="emailError" class="text-accent-600 text-sm mt-1 hidden"></div>
                    </div>

                    <!-- Password Field -->
                    <div>
                        <label for="password" class="block text-sm font-medium text-text-primary mb-2">
                            <i class="fas fa-lock mr-2 text-primary-600"></i>
                            Password
                        </label>
                        <div class="relative">
                            <input type="password" id="password" name="password" class="form-input w-full pr-10" placeholder="Enter your password" required />
                            <button type="button" id="togglePassword" class="absolute inset-y-0 right-0 pr-3 flex items-center text-text-secondary hover:text-text-primary transition-colors">
                                <i class="fas fa-eye" id="eyeIcon"></i>
                            </button>
                        </div>
                        <div id="passwordError" class="text-accent-600 text-sm mt-1 hidden"></div>
                    </div>

                    <!-- Remember Me & Forgot Password -->
                    <div class="flex items-center justify-between">
                        <label class="flex items-center">
                            <input type="checkbox" id="rememberMe" class="rounded border-border-light text-primary-600 focus:ring-primary-500" />
                            <span class="ml-2 text-sm text-text-secondary">Remember me</span>
                        </label>
                        <a href="javascript:void(0)" id="forgotPasswordLink" class="text-sm text-primary-600 hover:text-primary-700 transition-colors">
                            Forgot password?
                        </a>
                    </div>

                    <!-- Sign In Button -->
                    <button type="submit" id="signInBtn" class="btn-primary w-full py-3 text-base font-medium flex items-center justify-center gap-2">
                        <i class="fas fa-sign-in-alt"></i>
                        Sign In
                    </button>

                    <!-- Error Message -->
                    <div id="loginError" class="text-accent-600 text-sm text-center hidden"></div>
                </form>

                <!-- Demo Credentials -->
                <div class="mt-6 p-4 bg-primary-50 rounded-lg border border-primary-200">
                    <h3 class="text-sm font-medium text-primary-800 mb-2">Demo Credentials:</h3>
                    <div class="text-xs text-primary-700 space-y-1">
                        <div><strong>Admin:</strong> admin@fra.gov.in / admin123</div>
                        <div><strong>Collector:</strong> collector@district.gov.in / collector123</div>
                        <div><strong>Tribal Rep:</strong> tribal@community.org / tribal123</div>
                    </div>
                </div>
            </div>

            <!-- Security Notice -->
            <div class="mt-6 text-center">
                <div class="flex justify-center items-center gap-2 text-xs text-text-secondary mb-2">
                    <i class="fas fa-shield-alt text-secondary-600"></i>
                    <span>Your data is protected with 256-bit SSL encryption</span>
                </div>
                <div class="text-xs text-text-secondary">
                    ¬© 2025 Ministry of Tribal Affairs, Government of India. All Rights Reserved.
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 flex items-center gap-3">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600"></div>
            <span class="text-text-primary">Authenticating...</span>
        </div>
    </div>

    <!-- Forgot Password Modal -->
    <div id="forgotPasswordModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-text-primary">Reset Password</h3>
                <button id="closeForgotModal" class="text-text-secondary hover:text-text-primary">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="forgotPasswordForm">
                <div class="mb-4">
                    <label for="resetEmail" class="block text-sm font-medium text-text-primary mb-2">
                        Email Address
                    </label>
                    <input type="email" id="resetEmail" class="form-input w-full" placeholder="Enter your email address" required />
                </div>
                <div class="flex gap-3">
                    <button type="button" id="cancelReset" class="flex-1 px-4 py-2 border border-border-light rounded-md text-text-secondary hover:bg-gray-50 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" class="flex-1 btn-primary">
                        Send Reset Link
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Password toggle functionality
        document.getElementById('togglePassword').addEventListener('click', function() {
            const passwordField = document.getElementById('password');
            const eyeIcon = document.getElementById('eyeIcon');
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                eyeIcon.className = 'fas fa-eye-slash';
            } else {
                passwordField.type = 'password';
                eyeIcon.className = 'fas fa-eye';
            }
        });

        // Forgot password modal
        document.getElementById('forgotPasswordLink').addEventListener('click', function() {
            document.getElementById('forgotPasswordModal').classList.remove('hidden');
        });

        document.getElementById('closeForgotModal').addEventListener('click', function() {
            document.getElementById('forgotPasswordModal').classList.add('hidden');
        });

        document.getElementById('cancelReset').addEventListener('click', function() {
            document.getElementById('forgotPasswordModal').classList.add('hidden');
        });

        // Form validation and submission
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const role = document.getElementById('userRole').value;
            
            // Clear previous errors
            document.getElementById('emailError').classList.add('hidden');
            document.getElementById('passwordError').classList.add('hidden');
            document.getElementById('loginError').classList.add('hidden');
            
            // Basic validation
            if (!email || !password) {
                document.getElementById('loginError').textContent = 'Please fill in all required fields.';
                document.getElementById('loginError').classList.remove('hidden');
                return;
            }
            
            // Show loading
            document.getElementById('loadingOverlay').classList.remove('hidden');
            
            // Simulate authentication
            setTimeout(() => {
                document.getElementById('loadingOverlay').classList.add('hidden');
                
                // Mock authentication logic
                const validCredentials = {
                    'admin@fra.gov.in': 'admin123',
                    'collector@district.gov.in': 'collector123',
                    'tribal@community.org': 'tribal123',
                    'analyst@gis.gov.in': 'analyst123'
                };
                
                if (validCredentials[email] === password) {
                    // Store user info in localStorage
                    localStorage.setItem('fraUser', JSON.stringify({
                        email: email,
                        role: role,
                        loginTime: new Date().toISOString()
                    }));
                    
                    // Redirect to main dashboard
                    window.location.href = 'main_dashboard.html';
                } else {
                    document.getElementById('loginError').textContent = 'Invalid email or password. Please try again.';
                    document.getElementById('loginError').classList.remove('hidden');
                }
            }, 1500);
        });

        // Forgot password form
        document.getElementById('forgotPasswordForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const resetEmail = document.getElementById('resetEmail').value;
            
            if (!resetEmail) {
                alert('Please enter your email address.');
                return;
            }
            
            // Simulate sending reset email
            alert('Password reset link has been sent to your email address.');
            document.getElementById('forgotPasswordModal').classList.add('hidden');
            document.getElementById('resetEmail').value = '';
        });

        // Auto-fill demo credentials on role change
        document.getElementById('userRole').addEventListener('change', function() {
            const role = this.value;
            const emailField = document.getElementById('email');
            
            switch(role) {
                case 'government':
                    emailField.value = 'admin@fra.gov.in';
                    break;
                case 'tribal':
                    emailField.value = 'tribal@community.org';
                    break;
                case 'analyst':
                    emailField.value = 'analyst@gis.gov.in';
                    break;
                case 'collector':
                    emailField.value = 'collector@district.gov.in';
                    break;
            }
        });

        // Initialize with default credentials
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('email').value = 'admin@fra.gov.in';
        });
    </script>
<script id="dhws-dataInjector" src="../public/dhws-data-injector.js"></script>
</body>
</html>


================================================
FILE: pages/scheme_recommendations.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Scheme Recommendations - TribalVision</title>
    <link rel="stylesheet" href="../css/main.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<script type="module" src="https://static.rocket.new/rocket-web.js?_cfg=https%3A%2F%2Ffraatlas6365back.builtwithrocket.new&_be=https%3A%2F%2Fapplication.rocket.new&_v=0.1.8"></script>
</head>
<body class="bg-background" style="height: 100vh;">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-border-light sticky top-0 z-50">
        <div class="px-6 py-4">
            <div class="flex items-center justify-between">
                <!-- Logo and Title -->
                <div class="flex items-center gap-4">
                    <div class="bg-primary-800 p-2 rounded-lg">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-xl font-semibold text-text-primary">TribalVision</h1>
                        <p class="text-sm text-text-secondary">Scheme Recommendations</p>
                    </div>
                </div>

                <!-- Navigation -->
                <nav class="hidden md:flex items-center gap-6">
                    <a href="main_dashboard.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-tachometer-alt mr-2"></i>Dashboard
                    </a>
                    <a href="fra_claims_management.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-map-marked-alt mr-2"></i>Claims
                    </a>
                    <a href="ai_asset_mapping.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-satellite mr-2"></i>AI Mapping
                    </a>
                    <a href="scheme_recommendations.html" class="text-primary-600 font-medium">
                        <i class="fas fa-lightbulb mr-2"></i>Recommendations
                    </a>
                    <a href="village_analytics.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-chart-bar mr-2"></i>Analytics
                    </a>
                </nav>

                <!-- User Menu -->
                <div class="flex items-center gap-4">
                    <div class="flex items-center gap-2 text-sm text-text-secondary">
                        <i class="fas fa-shield-alt text-secondary-600"></i>
                        <span>Secure Session</span>
                    </div>
                    <div class="relative">
                        <button id="userMenuBtn" class="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-50 transition-colors">
                            <div class="w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center">
                                <i class="fas fa-user text-white text-sm"></i>
                            </div>
                            <i class="fas fa-chevron-down text-text-secondary text-xs"></i>
                        </button>
                        <div id="userMenu" class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-border-light hidden">
                            <div class="p-3 border-b border-border-light">
                                <p class="text-sm font-medium text-text-primary">Admin User</p>
                                <p class="text-xs text-text-secondary">admin@fra.gov.in</p>
                            </div>
                            <a href="login.html" class="block px-3 py-2 text-sm text-text-secondary hover:bg-gray-50 transition-colors">
                                <i class="fas fa-sign-out-alt mr-2"></i>Sign Out
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="flex-1 p-6">
        <!-- Page Header -->
        <div class="mb-6">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h2 class="text-2xl font-semibold text-text-primary mb-2">AI-Powered Scheme Recommendations</h2>
                    <p class="text-text-secondary">Decision support system for central scheme eligibility and intervention prioritization</p>
                </div>
                <div class="flex items-center gap-3">
                    <button id="exportBtn" class="btn-secondary flex items-center gap-2">
                        <i class="fas fa-download"></i>
                        Export Priority List
                    </button>
                    <button id="bulkEnrollBtn" class="btn-primary flex items-center gap-2">
                        <i class="fas fa-users"></i>
                        Bulk Enrollment
                    </button>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="floating-panel p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-text-secondary">Total FRA Holders</p>
                            <p class="text-2xl font-semibold text-text-primary">2,847</p>
                        </div>
                        <div class="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-users text-primary-600"></i>
                        </div>
                    </div>
                </div>
                <div class="floating-panel p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-text-secondary">High Priority</p>
                            <p class="text-2xl font-semibold text-accent-600">456</p>
                        </div>
                        <div class="w-12 h-12 bg-accent-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-exclamation-triangle text-accent-600"></i>
                        </div>
                    </div>
                </div>
                <div class="floating-panel p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-text-secondary">Eligible for Schemes</p>
                            <p class="text-2xl font-semibold text-secondary-600">1,923</p>
                        </div>
                        <div class="w-12 h-12 bg-secondary-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-check-circle text-secondary-600"></i>
                        </div>
                    </div>
                </div>
                <div class="floating-panel p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-text-secondary">Pending Documentation</p>
                            <p class="text-2xl font-semibold text-warning">312</p>
                        </div>
                        <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-file-alt text-warning"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="floating-panel p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">Scheme Type</label>
                    <select id="schemeFilter" class="form-input w-full">
                        <option value>All Schemes</option>
                        <option value="dajgua">DAJGUA</option>
                        <option value="pm-kisan">PM-KISAN</option>
                        <option value="jal-shakti">Jal Shakti</option>
                        <option value="fra-legal">FRA Legal Aid</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">Priority Level</label>
                    <select id="priorityFilter" class="form-input w-full">
                        <option value>All Priorities</option>
                        <option value="high">High Priority</option>
                        <option value="medium">Medium Priority</option>
                        <option value="low">Low Priority</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">District</label>
                    <select id="districtFilter" class="form-input w-full">
                        <option value>All Districts</option>
                        <option value="bastar">Bastar</option>
                        <option value="dantewada">Dantewada</option>
                        <option value="sukma">Sukma</option>
                        <option value="bijapur">Bijapur</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">Search</label>
                    <div class="relative">
                        <input type="text" id="searchInput" class="form-input w-full pl-10" placeholder="Search FRA holders..." />
                        <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary"></i>
                    </div>
                </div>
            </div>
            <div class="flex items-center justify-between mt-4">
                <div class="flex items-center gap-2">
                    <button id="resetFilters" class="text-sm text-primary-600 hover:text-primary-700 transition-colors">
                        <i class="fas fa-undo mr-1"></i>Reset Filters
                    </button>
                </div>
                <div class="text-sm text-text-secondary">
                    Showing <span id="resultCount">2,847</span> results
                </div>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Recommendations Table -->
            <div class="lg:col-span-2">
                <div class="floating-panel">
                    <div class="p-6 border-b border-border-light">
                        <h3 class="text-lg font-semibold text-text-primary">FRA Holder Recommendations</h3>
                        <p class="text-sm text-text-secondary mt-1">AI-powered eligibility analysis and priority scoring</p>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="w-full data-table">
                            <thead>
                                <tr class="bg-gray-50">
                                    <th class="text-left p-4 font-medium text-text-primary">
                                        <button class="flex items-center gap-1 hover:text-primary-600 transition-colors">
                                            FRA Holder
                                            <i class="fas fa-sort text-xs"></i>
                                        </button>
                                    </th>
                                    <th class="text-left p-4 font-medium text-text-primary">
                                        <button class="flex items-center gap-1 hover:text-primary-600 transition-colors">
                                            Location
                                            <i class="fas fa-sort text-xs"></i>
                                        </button>
                                    </th>
                                    <th class="text-left p-4 font-medium text-text-primary">Current Schemes</th>
                                    <th class="text-left p-4 font-medium text-text-primary">Eligible Programs</th>
                                    <th class="text-left p-4 font-medium text-text-primary">
                                        <button class="flex items-center gap-1 hover:text-primary-600 transition-colors">
                                            Priority Score
                                            <i class="fas fa-sort text-xs"></i>
                                        </button>
                                    </th>
                                    <th class="text-left p-4 font-medium text-text-primary">Status</th>
                                    <th class="text-left p-4 font-medium text-text-primary">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="recommendationsTable">
                                <!-- Table rows will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <div class="p-4 border-t border-border-light">
                        <div class="flex items-center justify-between">
                            <div class="text-sm text-text-secondary">
                                Showing 1-10 of 2,847 results
                            </div>
                            <div class="flex items-center gap-2">
                                <button class="px-3 py-1 text-sm border border-border-light rounded hover:bg-gray-50 transition-colors">
                                    Previous
                                </button>
                                <button class="px-3 py-1 text-sm bg-primary-600 text-white rounded">1</button>
                                <button class="px-3 py-1 text-sm border border-border-light rounded hover:bg-gray-50 transition-colors">2</button>
                                <button class="px-3 py-1 text-sm border border-border-light rounded hover:bg-gray-50 transition-colors">3</button>
                                <button class="px-3 py-1 text-sm border border-border-light rounded hover:bg-gray-50 transition-colors">
                                    Next
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analysis Panel -->
            <div class="lg:col-span-1">
                <div class="floating-panel">
                    <div class="p-6 border-b border-border-light">
                        <h3 class="text-lg font-semibold text-text-primary">Detailed Analysis</h3>
                        <p class="text-sm text-text-secondary mt-1">Select a holder for eligibility review</p>
                    </div>
                    <div id="analysisContent" class="p-6">
                        <!-- Default state -->
                        <div class="text-center py-8">
                            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <i class="fas fa-user-check text-2xl text-gray-400"></i>
                            </div>
                            <p class="text-text-secondary">Select an FRA holder from the table to view detailed eligibility analysis</p>
                        </div>
                    </div>
                </div>

                <!-- AI Insights Panel -->
                <div class="floating-panel mt-6">
                    <div class="p-6 border-b border-border-light">
                        <h3 class="text-lg font-semibold text-text-primary flex items-center gap-2">
                            <i class="fas fa-brain text-primary-600"></i>
                            AI Insights
                        </h3>
                    </div>
                    <div class="p-6 space-y-4">
                        <div class="bg-primary-50 p-4 rounded-lg">
                            <div class="flex items-start gap-3">
                                <i class="fas fa-lightbulb text-primary-600 mt-1"></i>
                                <div>
                                    <h4 class="font-medium text-text-primary mb-1">Priority Recommendation</h4>
                                    <p class="text-sm text-text-secondary">Focus on high water-index areas with low agricultural coverage for maximum impact</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-secondary-50 p-4 rounded-lg">
                            <div class="flex items-start gap-3">
                                <i class="fas fa-chart-line text-secondary-600 mt-1"></i>
                                <div>
                                    <h4 class="font-medium text-text-primary mb-1">Trend Analysis</h4>
                                    <p class="text-sm text-text-secondary">23% increase in scheme eligibility this quarter due to improved documentation</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-warning bg-opacity-10 p-4 rounded-lg">
                            <div class="flex items-start gap-3">
                                <i class="fas fa-exclamation-triangle text-warning mt-1"></i>
                                <div>
                                    <h4 class="font-medium text-text-primary mb-1">Action Required</h4>
                                    <p class="text-sm text-text-secondary">312 holders need documentation updates for scheme enrollment</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Enrollment Modal -->
    <div id="bulkEnrollModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold text-text-primary">Bulk Scheme Enrollment</h3>
                <button id="closeBulkModal" class="text-text-secondary hover:text-text-primary">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">Select Scheme</label>
                    <select id="bulkSchemeSelect" class="form-input w-full">
                        <option value>Choose scheme for enrollment</option>
                        <option value="dajgua">DAJGUA - Development of Particularly Vulnerable Tribal Groups</option>
                        <option value="pm-kisan">PM-KISAN - Pradhan Mantri Kisan Samman Nidhi</option>
                        <option value="jal-shakti">Jal Shakti - Water Conservation and Management</option>
                        <option value="fra-legal">FRA Legal Aid - Forest Rights Act Legal Support</option>
                    </select>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-text-primary mb-2">Priority Filter</label>
                    <div class="flex gap-4">
                        <label class="flex items-center">
                            <input type="checkbox" class="mr-2" checked /> High Priority (456)
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" class="mr-2" checked /> Medium Priority (892)
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" class="mr-2" /> Low Priority (1,499)
                        </label>
                    </div>
                </div>
                
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="font-medium text-text-primary mb-2">Enrollment Summary</h4>
                    <div class="text-sm text-text-secondary space-y-1">
                        <div class="flex justify-between">
                            <span>Selected holders:</span>
                            <span class="font-medium">1,348</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Eligible for selected scheme:</span>
                            <span class="font-medium text-secondary-600">1,156</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Already enrolled:</span>
                            <span class="font-medium text-warning">192</span>
                        </div>
                        <div class="flex justify-between border-t pt-2 mt-2">
                            <span class="font-medium">New enrollments:</span>
                            <span class="font-medium text-primary-600">964</span>
                        </div>
                    </div>
                </div>
                
                <div class="flex gap-3">
                    <button id="cancelBulkEnroll" class="flex-1 px-4 py-2 border border-border-light rounded-md text-text-secondary hover:bg-gray-50 transition-colors">
                        Cancel
                    </button>
                    <button id="confirmBulkEnroll" class="flex-1 btn-primary">
                        Process Enrollment
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Sample data for recommendations table
        const sampleData = [
            {
                id: 1,
                name: "Ramesh Kumar Gond",
                village: "Keshkal",
                district: "Bastar",
                currentSchemes: ["PM-KISAN"],
                eligibleSchemes: ["DAJGUA", "Jal Shakti"],
                priorityScore: 8.7,
                priority: "high",
                status: "eligible",
                waterIndex: 0.3,
                agriculturalPercentage: 65,
                forestCoverage: 78
            },
            {
                id: 2,
                name: "Sunita Devi Korwa",
                village: "Pharasgaon",
                district: "Dantewada",
                currentSchemes: ["FRA Legal Aid"],
                eligibleSchemes: ["DAJGUA", "PM-KISAN", "Jal Shakti"],
                priorityScore: 9.2,
                priority: "high",
                status: "documentation_pending",
                waterIndex: 0.2,
                agriculturalPercentage: 45,
                forestCoverage: 85
            },
            {
                id: 3,
                name: "Bharat Singh Baiga",
                village: "Kondagaon",
                district: "Bastar",
                currentSchemes: ["PM-KISAN", "Jal Shakti"],
                eligibleSchemes: ["DAJGUA"],
                priorityScore: 7.4,
                priority: "medium",
                status: "eligible",
                waterIndex: 0.6,
                agriculturalPercentage: 72,
                forestCoverage: 62
            },
            {
                id: 4,
                name: "Kamala Bai Muria",
                village: "Sukma",
                district: "Sukma",
                currentSchemes: [],
                eligibleSchemes: ["DAJGUA", "PM-KISAN", "FRA Legal Aid"],
                priorityScore: 8.9,
                priority: "high",
                status: "eligible",
                waterIndex: 0.1,
                agriculturalPercentage: 38,
                forestCoverage: 92
            },
            {
                id: 5,
                name: "Devendra Halba",
                village: "Bijapur",
                district: "Bijapur",
                currentSchemes: ["DAJGUA"],
                eligibleSchemes: ["PM-KISAN", "Jal Shakti"],
                priorityScore: 6.8,
                priority: "medium",
                status: "eligible",
                waterIndex: 0.4,
                agriculturalPercentage: 58,
                forestCoverage: 71
            }
        ];

        // Populate table
        function populateTable(data = sampleData) {
            const tbody = document.getElementById('recommendationsTable');
            tbody.innerHTML = '';

            data.forEach(holder => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 transition-colors cursor-pointer';
                row.onclick = () => showAnalysis(holder);

                const priorityColor = holder.priority === 'high' ? 'text-accent-600' : 
                                    holder.priority === 'medium' ? 'text-warning' : 'text-secondary-600';
                
                const statusBadge = holder.status === 'eligible' ? 
                    '<span class="px-2 py-1 bg-secondary-100 text-secondary-700 rounded-full text-xs">Eligible</span>' :
                    '<span class="px-2 py-1 bg-warning bg-opacity-20 text-warning rounded-full text-xs">Docs Pending</span>';

                row.innerHTML = `
                    <td class="p-4">
                        <div>
                            <div class="font-medium text-text-primary">${holder.name}</div>
                            <div class="text-sm text-text-secondary">ID: FRA${holder.id.toString().padStart(4, '0')}</div>
                        </div>
                    </td>
                    <td class="p-4">
                        <div class="text-sm">
                            <div class="text-text-primary">${holder.village}</div>
                            <div class="text-text-secondary">${holder.district}</div>
                        </div>
                    </td>
                    <td class="p-4">
                        <div class="flex flex-wrap gap-1">
                            ${holder.currentSchemes.map(scheme => 
                                `<span class="px-2 py-1 bg-primary-100 text-primary-700 rounded text-xs">${scheme}</span>`
                            ).join('')}
                            ${holder.currentSchemes.length === 0 ? '<span class="text-text-secondary text-sm">None</span>' : ''}
                        </div>
                    </td>
                    <td class="p-4">
                        <div class="flex flex-wrap gap-1">
                            ${holder.eligibleSchemes.map(scheme => 
                                `<span class="px-2 py-1 bg-secondary-100 text-secondary-700 rounded text-xs">${scheme}</span>`
                            ).join('')}
                        </div>
                    </td>
                    <td class="p-4">
                        <div class="flex items-center gap-2">
                            <span class="font-medium ${priorityColor}">${holder.priorityScore}</span>
                            <div class="w-16 h-2 bg-gray-200 rounded-full">
                                <div class="h-2 rounded-full ${holder.priority === 'high' ? 'bg-accent-600' : 
                                    holder.priority === 'medium' ? 'bg-warning' : 'bg-secondary-600'}" 
                                    style="width: ${holder.priorityScore * 10}%"></div>
                            </div>
                        </div>
                    </td>
                    <td class="p-4">${statusBadge}</td>
                    <td class="p-4">
                        <div class="flex items-center gap-2">
                            <button class="text-primary-600 hover:text-primary-700 transition-colors" title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="text-secondary-600 hover:text-secondary-700 transition-colors" title="Enroll">
                                <i class="fas fa-plus-circle"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Show detailed analysis
        function showAnalysis(holder) {
            const analysisContent = document.getElementById('analysisContent');
            
            const criteriaMatching = [
                { criteria: "Land ownership verification", status: "completed", icon: "check-circle", color: "text-secondary-600" },
                { criteria: "Income eligibility", status: "completed", icon: "check-circle", color: "text-secondary-600" },
                { criteria: "Tribal community verification", status: "completed", icon: "check-circle", color: "text-secondary-600" },
                { criteria: "Bank account linkage", status: holder.status === 'documentation_pending' ? "pending" : "completed", 
                  icon: holder.status === 'documentation_pending' ? "clock" : "check-circle", 
                  color: holder.status === 'documentation_pending' ? "text-warning" : "text-secondary-600" }
            ];

            analysisContent.innerHTML = `
                <div class="space-y-6">
                    <!-- Holder Info -->
                    <div class="border-b border-border-light pb-4">
                        <h4 class="font-semibold text-text-primary mb-2">${holder.name}</h4>
                        <div class="text-sm text-text-secondary space-y-1">
                            <div><i class="fas fa-map-marker-alt mr-2"></i>${holder.village}, ${holder.district}</div>
                            <div><i class="fas fa-id-card mr-2"></i>FRA${holder.id.toString().padStart(4, '0')}</div>
                        </div>
                    </div>

                    <!-- Priority Score -->
                    <div>
                        <h5 class="font-medium text-text-primary mb-3">Priority Analysis</h5>
                        <div class="space-y-3">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-text-secondary">Overall Score</span>
                                <span class="font-semibold text-lg ${holder.priority === 'high' ? 'text-accent-600' : 
                                    holder.priority === 'medium' ? 'text-warning' : 'text-secondary-600'}">${holder.priorityScore}/10</span>
                            </div>
                            <div class="space-y-2">
                                <div class="flex justify-between text-sm">
                                    <span>Water Index</span>
                                    <span>${holder.waterIndex}</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="bg-primary-600 h-2 rounded-full" style="width: ${holder.waterIndex * 100}%"></div>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <div class="flex justify-between text-sm">
                                    <span>Agricultural Coverage</span>
                                    <span>${holder.agriculturalPercentage}%</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="bg-secondary-600 h-2 rounded-full" style="width: ${holder.agriculturalPercentage}%"></div>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <div class="flex justify-between text-sm">
                                    <span>Forest Coverage</span>
                                    <span>${holder.forestCoverage}%</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div class="bg-green-600 h-2 rounded-full" style="width: ${holder.forestCoverage}%"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Eligibility Criteria -->
                    <div>
                        <h5 class="font-medium text-text-primary mb-3">Eligibility Criteria</h5>
                        <div class="space-y-2">
                            ${criteriaMatching.map(criteria => `
                                <div class="flex items-center justify-between p-2 bg-gray-50 rounded">
                                    <span class="text-sm text-text-secondary">${criteria.criteria}</span>
                                    <i class="fas fa-${criteria.icon} ${criteria.color}"></i>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <!-- Eligible Schemes -->
                    <div>
                        <h5 class="font-medium text-text-primary mb-3">Eligible Schemes</h5>
                        <div class="space-y-2">
                            ${holder.eligibleSchemes.map(scheme => `
                                <div class="p-3 border border-border-light rounded-lg">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <div class="font-medium text-text-primary">${scheme}</div>
                                            <div class="text-xs text-text-secondary mt-1">
                                                ${scheme === 'DAJGUA' ? 'Development support for tribal communities' :
                                                  scheme === 'PM-KISAN' ? 'Direct income support for farmers' :
                                                  scheme === 'Jal Shakti' ? 'Water conservation and management' :
                                                  'Legal aid for forest rights'}
                                            </div>
                                        </div>
                                        <button class="btn-primary text-xs px-2 py-1">
                                            Enroll
                                        </button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <!-- Implementation Timeline -->
                    <div>
                        <h5 class="font-medium text-text-primary mb-3">Implementation Timeline</h5>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-text-secondary">Documentation Review</span>
                                <span class="text-text-primary">2-3 days</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-text-secondary">Verification Process</span>
                                <span class="text-text-primary">5-7 days</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-text-secondary">Scheme Enrollment</span>
                                <span class="text-text-primary">1-2 days</span>
                            </div>
                            <div class="flex justify-between font-medium border-t pt-2">
                                <span class="text-text-primary">Total Timeline</span>
                                <span class="text-primary-600">8-12 days</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // User menu toggle
        document.getElementById('userMenuBtn').addEventListener('click', function() {
            const menu = document.getElementById('userMenu');
            menu.classList.toggle('hidden');
        });

        // Close user menu when clicking outside
        document.addEventListener('click', function(e) {
            const menu = document.getElementById('userMenu');
            const btn = document.getElementById('userMenuBtn');
            if (!menu.contains(e.target) && !btn.contains(e.target)) {
                menu.classList.add('hidden');
            }
        });

        // Bulk enrollment modal
        document.getElementById('bulkEnrollBtn').addEventListener('click', function() {
            document.getElementById('bulkEnrollModal').classList.remove('hidden');
        });

        document.getElementById('closeBulkModal').addEventListener('click', function() {
            document.getElementById('bulkEnrollModal').classList.add('hidden');
        });

        document.getElementById('cancelBulkEnroll').addEventListener('click', function() {
            document.getElementById('bulkEnrollModal').classList.add('hidden');
        });

        document.getElementById('confirmBulkEnroll').addEventListener('click', function() {
            alert('Bulk enrollment process initiated. You will receive a confirmation email shortly.');
            document.getElementById('bulkEnrollModal').classList.add('hidden');
        });

        // Export functionality
        document.getElementById('exportBtn').addEventListener('click', function() {
            alert('Priority list export initiated. Download will begin shortly.');
        });

        // Filter functionality
        function applyFilters() {
            const schemeFilter = document.getElementById('schemeFilter').value;
            const priorityFilter = document.getElementById('priorityFilter').value;
            const districtFilter = document.getElementById('districtFilter').value;
            const searchInput = document.getElementById('searchInput').value.toLowerCase();

            let filteredData = sampleData.filter(holder => {
                const matchesScheme = !schemeFilter || holder.eligibleSchemes.some(scheme => 
                    scheme.toLowerCase().includes(schemeFilter.toLowerCase()));
                const matchesPriority = !priorityFilter || holder.priority === priorityFilter;
                const matchesDistrict = !districtFilter || holder.district.toLowerCase() === districtFilter.toLowerCase();
                const matchesSearch = !searchInput || 
                    holder.name.toLowerCase().includes(searchInput) ||
                    holder.village.toLowerCase().includes(searchInput);

                return matchesScheme && matchesPriority && matchesDistrict && matchesSearch;
            });

            populateTable(filteredData);
            document.getElementById('resultCount').textContent = filteredData.length.toLocaleString();
        }

        // Add event listeners for filters
        document.getElementById('schemeFilter').addEventListener('change', applyFilters);
        document.getElementById('priorityFilter').addEventListener('change', applyFilters);
        document.getElementById('districtFilter').addEventListener('change', applyFilters);
        document.getElementById('searchInput').addEventListener('input', applyFilters);

        // Reset filters
        document.getElementById('resetFilters').addEventListener('click', function() {
            document.getElementById('schemeFilter').value = '';
            document.getElementById('priorityFilter').value = '';
            document.getElementById('districtFilter').value = '';
            document.getElementById('searchInput').value = '';
            populateTable();
            document.getElementById('resultCount').textContent = sampleData.length.toLocaleString();
        });

        // Initialize table
        populateTable();
    </script>
<script id="dhws-dataInjector" src="../public/dhws-data-injector.js"></script>
</body>
</html>


================================================
FILE: pages/village_analytics.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Village Analytics - TribalVision</title>
    <link rel="stylesheet" href="../css/main.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="module" src="https://static.rocket.new/rocket-web.js?_cfg=https%3A%2F%2Ffraatlas6365back.builtwithrocket.new&_be=https%3A%2F%2Fapplication.rocket.new&_v=0.1.8"></script>
</head>
<body class="bg-background" style="height: 100vh;">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-border-light">
        <div class="px-6 py-4">
            <div class="flex items-center justify-between">
                <!-- Logo and Title -->
                <div class="flex items-center gap-4">
                    <div class="bg-primary-800 p-2 rounded-lg">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-xl font-semibold text-text-primary">TribalVision</h1>
                        <p class="text-sm text-text-secondary">Village Analytics Dashboard</p>
                    </div>
                </div>

                <!-- Navigation -->
                <nav class="hidden md:flex items-center gap-6">
                    <a href="main_dashboard.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-home mr-2"></i>Dashboard
                    </a>
                    <a href="fra_claims_management.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-file-alt mr-2"></i>Claims
                    </a>
                    <a href="ai_asset_mapping.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-satellite mr-2"></i>AI Mapping
                    </a>
                    <a href="scheme_recommendations.html" class="text-text-secondary hover:text-primary-600 transition-colors">
                        <i class="fas fa-lightbulb mr-2"></i>Recommendations
                    </a>
                    <a href="village_analytics.html" class="text-primary-600 font-medium">
                        <i class="fas fa-chart-line mr-2"></i>Analytics
                    </a>
                </nav>

                <!-- User Menu -->
                <div class="flex items-center gap-4">
                    <div class="flex items-center gap-2 text-sm text-text-secondary">
                        <i class="fas fa-sync-alt text-secondary-600"></i>
                        <span>Last updated: 10/09/2025 11:37</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
                            <i class="fas fa-user text-primary-600 text-sm"></i>
                        </div>
                        <span class="text-sm font-medium text-text-primary">Admin User</span>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="flex-1 p-6">
        <!-- Village Selection and Controls -->
        <div class="floating-panel p-6 mb-6">
            <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
                <div class="flex-1 grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- Village Selection -->
                    <div>
                        <label class="block text-sm font-medium text-text-primary mb-2">
                            <i class="fas fa-map-marker-alt mr-2 text-primary-600"></i>
                            Select Village
                        </label>
                        <select id="villageSelect" class="form-input w-full">
                            <option value="village1">Khairwani Village, Balaghat</option>
                            <option value="village2">Mandla Village, Mandla</option>
                            <option value="village3">Seoni Village, Seoni</option>
                            <option value="village4">Dindori Village, Dindori</option>
                        </select>
                    </div>

                    <!-- District Filter -->
                    <div>
                        <label class="block text-sm font-medium text-text-primary mb-2">
                            <i class="fas fa-filter mr-2 text-primary-600"></i>
                            District Filter
                        </label>
                        <select id="districtFilter" class="form-input w-full">
                            <option value="all">All Districts</option>
                            <option value="balaghat">Balaghat</option>
                            <option value="mandla">Mandla</option>
                            <option value="seoni">Seoni</option>
                            <option value="dindori">Dindori</option>
                        </select>
                    </div>

                    <!-- Search -->
                    <div>
                        <label class="block text-sm font-medium text-text-primary mb-2">
                            <i class="fas fa-search mr-2 text-primary-600"></i>
                            Search Villages
                        </label>
                        <input type="text" id="villageSearch" class="form-input w-full" placeholder="Search by village name..." />
                    </div>
                </div>

                <!-- Export Controls -->
                <div class="flex gap-2">
                    <button class="btn-secondary px-4 py-2 text-sm">
                        <i class="fas fa-download mr-2"></i>Export Report
                    </button>
                    <button class="btn-primary px-4 py-2 text-sm">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh Data
                    </button>
                </div>
            </div>
        </div>

        <!-- Main Analytics Layout -->
        <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
            <!-- Map Section -->
            <div class="xl:col-span-2">
                <div class="floating-panel p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-lg font-semibold text-text-primary">
                            <i class="fas fa-map mr-2 text-primary-600"></i>
                            Village Geospatial Analysis
                        </h2>
                        <div class="flex gap-2">
                            <button id="layerToggle" class="px-3 py-1 text-sm border border-border-light rounded-md hover:bg-gray-50 transition-colors">
                                <i class="fas fa-layer-group mr-1"></i>Layers
                            </button>
                            <button id="fullscreenMap" class="px-3 py-1 text-sm border border-border-light rounded-md hover:bg-gray-50 transition-colors">
                                <i class="fas fa-expand mr-1"></i>Fullscreen
                            </button>
                        </div>
                    </div>
                    
                    <!-- Map Container -->
                    <div id="villageMap" class="w-full h-96 lg:h-[500px] rounded-lg border border-border-light relative">
                        <!-- Map will be initialized here -->
                        <div class="absolute inset-0 bg-gray-100 rounded-lg flex items-center justify-center">
                            <div class="text-center">
                                <i class="fas fa-map text-4xl text-gray-400 mb-2"></i>
                                <p class="text-gray-500">Interactive Map Loading...</p>
                            </div>
                        </div>
                    </div>

                    <!-- Map Legend -->
                    <div class="mt-4 p-4 bg-gray-50 rounded-lg">
                        <h3 class="text-sm font-medium text-text-primary mb-3">Map Legend</h3>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs">
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 bg-secondary-500 rounded"></div>
                                <span>Forest Cover</span>
                            </div>
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 bg-warning rounded"></div>
                                <span>Agricultural Land</span>
                            </div>
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 bg-primary-500 rounded"></div>
                                <span>Water Bodies</span>
                            </div>
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 bg-accent-500 rounded"></div>
                                <span>FRA Claims</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Statistics Panel -->
            <div class="space-y-6">
                <!-- Village Overview -->
                <div class="floating-panel p-6">
                    <h3 class="text-lg font-semibold text-text-primary mb-4">
                        <i class="fas fa-info-circle mr-2 text-primary-600"></i>
                        Village Overview
                    </h3>
                    <div class="space-y-4">
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-text-secondary">Total Population</span>
                            <span class="font-semibold text-text-primary">2,847</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-text-secondary">Tribal Households</span>
                            <span class="font-semibold text-text-primary">456</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-text-secondary">Total Area</span>
                            <span class="font-semibold text-text-primary">1,245 hectares</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-text-secondary">Forest Coverage</span>
                            <span class="font-semibold text-secondary-600">68.5%</span>
                        </div>
                    </div>
                </div>

                <!-- FRA Claims Status -->
                <div class="floating-panel p-6">
                    <h3 class="text-lg font-semibold text-text-primary mb-4">
                        <i class="fas fa-file-alt mr-2 text-primary-600"></i>
                        FRA Claims Status
                    </h3>
                    <div class="space-y-4">
                        <div>
                            <div class="flex justify-between items-center mb-2">
                                <span class="text-sm text-text-secondary">Completion Rate</span>
                                <span class="font-semibold text-text-primary">78.5%</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill success" style="width: 78.5%"></div>
                            </div>
                        </div>
                        <div class="grid grid-cols-2 gap-4 text-center">
                            <div class="p-3 bg-secondary-50 rounded-lg">
                                <div class="text-lg font-semibold text-secondary-600">142</div>
                                <div class="text-xs text-text-secondary">Approved</div>
                            </div>
                            <div class="p-3 bg-warning/10 rounded-lg">
                                <div class="text-lg font-semibold text-warning">39</div>
                                <div class="text-xs text-text-secondary">Pending</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Scheme Participation -->
                <div class="floating-panel p-6">
                    <h3 class="text-lg font-semibold text-text-primary mb-4">
                        <i class="fas fa-users mr-2 text-primary-600"></i>
                        Scheme Participation
                    </h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-text-secondary">PM-KISAN</span>
                            <div class="flex items-center gap-2">
                                <span class="text-sm font-medium">234</span>
                                <div class="w-16 h-2 bg-gray-200 rounded-full">
                                    <div class="h-full bg-secondary-500 rounded-full" style="width: 85%"></div>
                                </div>
                            </div>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-text-secondary">DAJGUA</span>
                            <div class="flex items-center gap-2">
                                <span class="text-sm font-medium">189</span>
                                <div class="w-16 h-2 bg-gray-200 rounded-full">
                                    <div class="h-full bg-primary-500 rounded-full" style="width: 68%"></div>
                                </div>
                            </div>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-text-secondary">Jal Shakti</span>
                            <div class="flex items-center gap-2">
                                <span class="text-sm font-medium">156</span>
                                <div class="w-16 h-2 bg-gray-200 rounded-full">
                                    <div class="h-full bg-accent-500 rounded-full" style="width: 56%"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Analytics Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            <!-- Comparative Analysis -->
            <div class="floating-panel p-6">
                <h3 class="text-lg font-semibold text-text-primary mb-4">
                    <i class="fas fa-chart-bar mr-2 text-primary-600"></i>
                    Comparative Analysis
                </h3>
                <div class="space-y-4">
                    <div>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-text-secondary">vs District Average</span>
                            <span class="text-sm font-medium text-secondary-600">+12.3%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill success" style="width: 67%"></div>
                        </div>
                    </div>
                    <div>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-text-secondary">vs State Average</span>
                            <span class="text-sm font-medium text-warning">-5.8%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill warning" style="width: 45%"></div>
                        </div>
                    </div>
                </div>

                <!-- Key Metrics -->
                <div class="mt-6 grid grid-cols-2 gap-4">
                    <div class="text-center p-3 bg-primary-50 rounded-lg">
                        <div class="text-lg font-semibold text-primary-600">8.2</div>
                        <div class="text-xs text-text-secondary">Water Index</div>
                    </div>
                    <div class="text-center p-3 bg-secondary-50 rounded-lg">
                        <div class="text-lg font-semibold text-secondary-600">92%</div>
                        <div class="text-xs text-text-secondary">Infrastructure Score</div>
                    </div>
                </div>
            </div>

            <!-- Intervention Priority -->
            <div class="floating-panel p-6">
                <h3 class="text-lg font-semibold text-text-primary mb-4">
                    <i class="fas fa-exclamation-triangle mr-2 text-warning"></i>
                    Intervention Priority
                </h3>
                
                <!-- Priority Score -->
                <div class="text-center mb-6">
                    <div class="text-3xl font-bold text-warning mb-2">Medium</div>
                    <div class="text-sm text-text-secondary">Priority Level</div>
                </div>

                <!-- Priority Factors -->
                <div class="space-y-3">
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-text-secondary">Water Access</span>
                        <div class="flex items-center gap-2">
                            <div class="w-20 h-2 bg-gray-200 rounded-full">
                                <div class="h-full bg-accent-500 rounded-full" style="width: 35%"></div>
                            </div>
                            <span class="text-sm font-medium text-accent-600">Low</span>
                        </div>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-text-secondary">Agricultural Support</span>
                        <div class="flex items-center gap-2">
                            <div class="w-20 h-2 bg-gray-200 rounded-full">
                                <div class="h-full bg-warning rounded-full" style="width: 65%"></div>
                            </div>
                            <span class="text-sm font-medium text-warning">Medium</span>
                        </div>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-text-secondary">Infrastructure</span>
                        <div class="flex items-center gap-2">
                            <div class="w-20 h-2 bg-gray-200 rounded-full">
                                <div class="h-full bg-secondary-500 rounded-full" style="width: 85%"></div>
                            </div>
                            <span class="text-sm font-medium text-secondary-600">High</span>
                        </div>
                    </div>
                </div>

                <!-- Recommended Actions -->
                <div class="mt-4 p-3 bg-warning/10 rounded-lg">
                    <h4 class="text-sm font-medium text-text-primary mb-2">Recommended Actions:</h4>
                    <ul class="text-xs text-text-secondary space-y-1">
                        <li>‚Ä¢ Improve water infrastructure access</li>
                        <li>‚Ä¢ Enhance agricultural extension services</li>
                        <li>‚Ä¢ Monitor FRA claim processing</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Data Trends Chart -->
        <div class="floating-panel p-6 mt-6">
            <h3 class="text-lg font-semibold text-text-primary mb-4">
                <i class="fas fa-chart-line mr-2 text-primary-600"></i>
                Village Development Trends
            </h3>
            <div class="h-64">
                <canvas id="trendsChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Layer Control Modal -->
    <div id="layerModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-text-primary">Map Layers</h3>
                <button id="closeLayerModal" class="text-text-secondary hover:text-text-primary">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="space-y-3">
                <label class="flex items-center">
                    <input type="checkbox" id="villageLayer" checked class="rounded border-border-light text-primary-600 focus:ring-primary-500" />
                    <span class="ml-2 text-sm">Village Boundaries</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="fraLayer" checked class="rounded border-border-light text-primary-600 focus:ring-primary-500" />
                    <span class="ml-2 text-sm">FRA Claims</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="landUseLayer" checked class="rounded border-border-light text-primary-600 focus:ring-primary-500" />
                    <span class="ml-2 text-sm">Land Use Classification</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="infrastructureLayer" class="rounded border-border-light text-primary-600 focus:ring-primary-500" />
                    <span class="ml-2 text-sm">Infrastructure</span>
                </label>
            </div>
            <div class="flex gap-3 mt-6">
                <button id="applyLayers" class="flex-1 btn-primary">Apply Changes</button>
            </div>
        </div>
    </div>

    <script>
        // Initialize map
        let villageMap;
        let trendsChart;

        document.addEventListener('DOMContentLoaded', function() {
            initializeMap();
            initializeChart();
            setupEventListeners();
        });

        function initializeMap() {
            // Initialize Leaflet map
            villageMap = L.map('villageMap').setView([22.5726, 78.9629], 10);
            
            // Add tile layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(villageMap);

            // Add sample markers for FRA claims
            const sampleClaims = [
                {lat: 22.5726, lng: 78.9629, title: "Claim #001", status: "Approved"},
                {lat: 22.5826, lng: 78.9729, title: "Claim #002", status: "Pending"},
                {lat: 22.5626, lng: 78.9529, title: "Claim #003", status: "Approved"}
            ];

            sampleClaims.forEach(claim => {
                const marker = L.marker([claim.lat, claim.lng]).addTo(villageMap);
                marker.bindPopup(`<b>${claim.title}</b><br>Status: ${claim.status}`);
            });

            // Add village boundary (sample polygon)
            const villageBoundary = L.polygon([
                [22.5626, 78.9429],
                [22.5826, 78.9429],
                [22.5826, 78.9829],
                [22.5626, 78.9829]
            ], {
                color: '#1E40AF',
                fillColor: '#3B82F6',
                fillOpacity: 0.2
            }).addTo(villageMap);

            villageBoundary.bindPopup("Khairwani Village Boundary");
        }

        function initializeChart() {
            const ctx = document.getElementById('trendsChart').getContext('2d');
            trendsChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'FRA Claims Processed',
                        data: [12, 19, 15, 25, 22, 30],
                        borderColor: '#1E40AF',
                        backgroundColor: 'rgba(30, 64, 175, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Scheme Enrollments',
                        data: [8, 15, 12, 18, 16, 24],
                        borderColor: '#059669',
                        backgroundColor: 'rgba(5, 150, 105, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function setupEventListeners() {
            // Village selection change
            document.getElementById('villageSelect').addEventListener('change', function() {
                const selectedVillage = this.value;
                updateVillageData(selectedVillage);
            });

            // Layer control modal
            document.getElementById('layerToggle').addEventListener('click', function() {
                document.getElementById('layerModal').classList.remove('hidden');
            });

            document.getElementById('closeLayerModal').addEventListener('click', function() {
                document.getElementById('layerModal').classList.add('hidden');
            });

            document.getElementById('applyLayers').addEventListener('click', function() {
                // Apply layer visibility changes
                document.getElementById('layerModal').classList.add('hidden');
            });

            // Fullscreen map
            document.getElementById('fullscreenMap').addEventListener('click', function() {
                const mapContainer = document.getElementById('villageMap');
                if (mapContainer.requestFullscreen) {
                    mapContainer.requestFullscreen();
                }
            });

            // Search functionality
            document.getElementById('villageSearch').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                // Implement search logic here
                console.log('Searching for:', searchTerm);
            });

            // Export functionality
            document.querySelector('.btn-secondary').addEventListener('click', function() {
                // Simulate export
                alert('Village analytics report exported successfully!');
            });

            // Refresh data
            document.querySelector('.btn-primary').addEventListener('click', function() {
                // Simulate data refresh
                const button = this;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Refreshing...';
                button.disabled = true;

                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                    alert('Data refreshed successfully!');
                }, 2000);
            });
        }

        function updateVillageData(villageId) {
            // Simulate updating village data based on selection
            console.log('Updating data for village:', villageId);
            
            // Update map center based on village
            const villageCoords = {
                'village1': [22.5726, 78.9629],
                'village2': [22.6726, 79.0629],
                'village3': [22.4726, 78.8629],
                'village4': [22.7726, 79.1629]
            };

            if (villageCoords[villageId]) {
                villageMap.setView(villageCoords[villageId], 12);
            }
        }

        // Mobile menu toggle (if needed)
        function toggleMobileMenu() {
            const nav = document.querySelector('nav');
            nav.classList.toggle('hidden');
        }
    </script>
<script id="dhws-dataInjector" src="../public/dhws-data-injector.js"></script>
</body>
</html>


================================================
FILE: public/manifest.json
================================================
{
  "short_name": "fra-atlas-webgis",
  "name": "fra-atlas-webgis",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

